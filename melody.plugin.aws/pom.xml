<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.wat.melody</groupId>
		<artifactId>melody.project</artifactId>
		<version>0.0.1</version>
	</parent>

	<artifactId>melody.plugin.aws</artifactId>
	<packaging>jar</packaging>

	<name>melody.plugin.aws</name>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.amazonaws</groupId>
			<artifactId>aws-java-sdk</artifactId>
			<version>1.9.13</version>
			<exclusions>
				<!-- aws-java-sdk requires commons-codec:commons-codec:1.3 but aws-java-sdk 
					also requires org.apache.httpcomponents:httpclient:4.2 which requires commons-codec:commons-codec:1.6 
					! -->
				<exclusion>
					<groupId>commons-codec</groupId>
					<artifactId>commons-codec</artifactId>
				</exclusion>
				<!-- unlike said in the aws-java-sdk's pom - where it is mark for compile 
					time only -, com.fasterxml.jackson.core:databinds, com.fasterxml.jackson.core:annotations 
					and com.fasterxml.jackson.core:core are required for runtime. So we don't 
					exclude them here -->
				<!-- JavaMail is only needed if you want to use the JavaMail provider 
					for Amazon Simple Email Service -->
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<!-- The Amazon Simple Workflow Java Flow framework requires additional 
					dependencies -->
				<exclusion>
					<groupId>org.freemarker</groupId>
					<artifactId>freemarker</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-beans</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-context</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-test</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.aspectj</groupId>
					<artifactId>aspectjrt</artifactId>
				</exclusion>
				<!-- JDK 1.6 and above include StAX support by default, so these two 
					dependencies are only needed for compiling/running against a 1.5 JVM. -->
				<exclusion>
					<groupId>stax</groupId>
					<artifactId>stax-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>stax</groupId>
					<artifactId>stax</artifactId>
				</exclusion>
				<!-- JUnit is needed to compile the support classes for the workflow 
					service -->
				<exclusion>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- aws-java-sdk requires commons-codec:commons-codec:1.3 but aws-java-sdk 
			also requires org.apache.httpcomponents:httpclient:4.2 which requires commons-codec:commons-codec:1.6 
			! So, we exclude commons-codec:commons-codec from aws-java-sdk and we explicitly 
			declare the dependency to commons-codec:commons-codec:1.6 here -->
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.6</version>
		</dependency>
		<dependency>
			<groupId>com.wat.melody</groupId>
			<artifactId>melody.common</artifactId>
			<version>0.0.1</version>
		</dependency>
		<dependency>
			<groupId>com.wat.melody</groupId>
			<artifactId>melody.api</artifactId>
			<version>0.0.1</version>
		</dependency>
		<dependency>
			<groupId>com.wat.melody</groupId>
			<artifactId>melody.cloud</artifactId>
			<version>0.0.1</version>
		</dependency>
		<dependency>
			<groupId>com.wat.melody</groupId>
			<artifactId>melody.plugin.ssh</artifactId>
			<version>0.0.1</version>
		</dependency>
		<dependency>
			<groupId>com.wat.melody</groupId>
			<artifactId>melody.plugin.telnet</artifactId>
			<version>0.0.1</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.tycho</groupId>
			<artifactId>org.eclipse.osgi</artifactId>
			<version>3.10.0.v20140606-1445</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.9</version>
		</dependency>


		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.7.9</version>
			<scope>test</scope>
		</dependency>
		<!-- because org.jboss.security.vault.SecurityVaultFactory uses JUL, we 
			need a bridge from JUL (e.g. java.util.logging) to SLF4J. -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
			<version>1.7.9</version>
			<scope>test</scope>
		</dependency>
		<!-- because Melody Plug-In for AWS and LibVirt uses jar that uses JCL 
			(e.g. apache commons logging), we need a bridge from JCL to SLF4J. -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>1.7.9</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.0</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.3</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

</project>