<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>

<sequence basedir=".">

    <!-- configure the given jee-server for mq.
         caller must define 'machine', which represents the jee-server to configure.
         caller must define 'machine.cnx.ip', which represents the administration ip of the jee-server to configure.
         caller must define 'machine.cnx.kp', which represents the key-pair to connect on the jee-server.
         caller must define 'appli.name', which represents the application which need to be configured.
         caller must define 'jees.id', which represents the jee-server id.
         caller must define 'jees.owner', which represents the jee-server owner.
         caller must define 'jees.path', which represents the jee-server path.
         caller must define 'tmpfile.abs', which represents the jee-server configuration file. -->
    <order name="configure-mq-on-single-jee-server">
        <echo message="[§[appli.name]§.conf:§[jees.id]§] Enable Descriptor property replacement." severity="info"/>
        <remove-xml-elements file="§[tmpfile.abs]§" grep="[§[appli.name]§.conf:§[jees.id]§]">
            <elements-selector>
                /*:server/*:profile/*:subsystem/*:spec-descriptor-property-replacement
            </elements-selector>
        </remove-xml-elements>
        <insert-xml-elements-before file="§[tmpfile.abs]§" grep="[§[appli.name]§.conf:§[jees.id]§]">
            <elements-selector>
                /*:server/*:profile/*:subsystem/*:jboss-descriptor-property-replacement
            </elements-selector>
            <node-content>
                <![CDATA[
            <spec-descriptor-property-replacement>true</spec-descriptor-property-replacement>
                ]]>
            </node-content>
        </insert-xml-elements-before>

        <echo message="[§[appli.name]§.conf:§[jees.id]§] Declare system properties." severity="info"/>
        <insert-xml-elements-before file="§[tmpfile.abs]§" grep="[§[appli.name]§.conf:§[jees.id]§]">
            <only-if-not-exists>
                /*:server/*:system-properties
            </only-if-not-exists>
            <!--  system properties must be place between extension and vault -->
            <elements-selector>
                /*:server/*:vault
            </elements-selector>
            <node-content>
                <![CDATA[
                <system-properties/>
                ]]>
            </node-content>
        </insert-xml-elements-before>

        <!-- one application can be linked to multiple mq-servers. Looping through all mq-servers. -->
        <foreach    items="./environment//instance[exists(mq-server/applications/application[@name='§[appli.name]§'])]"
                    item-name="mqs"
                    max-par="1">
            <property name="mqs.provider"             value="§[ §[mqs]§/mq-server/@provider ]§"/>
            <property name="mqs.version"              value="§[ §[mqs]§/mq-server/@version ]§"/>
            <property name="mqs.listen.device"        value="§[ melody:getAttributeValue(§[mqs]§/mq-server/listen-on/@device, 'eth0') ]§"/>
            <property name="mqs.listen.ip"            value="§[ melody:getNetworkDeviceElementByName(§[mqs]§, '§[mqs.listen.device]§' )/@ip ]§"/>
            <property name="mqs.listen.fqdn"          value="§[ melody:getNetworkDeviceElementByName(§[mqs]§, '§[mqs.listen.device]§' )/@fqdn ]§"/>
            <property name="mqs.listen.port-offset"   value="§[ §[mqs]§/mq-server/listen-on/@port-offset ]§"/>
            <property name="mqs.listen.port.tcp"      value="§[ number(§[mqs]§/mq-server/listen-on/socket[@name='tcp']/@port) + §[mqs.listen.port-offset]§ ]§"/>
            <property name="appli"                    value="§[mqs]§/mq-server/applications/application[@name='§[appli.name]§']"/>

            <!-- Deploy mq rar -->
            <call orders="deploy-mq-rar-on-single-jee-server">
                <param name="mq.rar.name"      value="§[mqs.provider]§-§[mqs.version]§"/>
                <param name="mq.rar.version"   value="§[mqs.version]§"/>
            </call>

            <!-- Declare connection definition -->
            <foreach    items="§[appli]§/connection-definitions/connection-definition"
                        item-name="connection-definition"
                        max-par="1">
                <call orders="declare-connection-definition-on-single-jee-server">
                    <param name="connection-definition.name"   value="§[ §[connection-definition]§/@name ]§"/>
                    <param name="mq.rar.name"                  value="§[mqs.provider]§-§[mqs.version]§"/>
                    <param name="mqs.fqdn"                     value="§[mqs.listen.fqdn]§"/>
                    <param name="mqs.port"                     value="§[mqs.listen.port.tcp]§"/>
                    <param name="queue-manager.name"           value="§[ §[connection-definition]§/@ref-queue-manager ]§"/>
                    <param name="channel.name"                 value="§[ §[connection-definition]§/@ref-channel ]§"/>
                    <param name="user.name"                    value="mqm"/>
                </call>
            </foreach>

            <!-- Declare queues -->
            <foreach    items="§[appli]§/queues/queue"
                        item-name="queue"
                        max-par="1">
                <call orders="declare-queue-on-single-jee-server">
                    <param name="queue.name"    value="§[ §[queue]§/@ref-queue ]§"/>
                    <param name="mq.rar.name"   value="§[mqs.provider]§-§[mqs.version]§"/>
                </call>
            </foreach>

            <!-- Declare MDBs -->
            <foreach    items="§[appli]§/mdbs/mdb"
                        item-name="mdb"
                        max-par="1">
                <property name="mdb.name" value="§[ §[mdb]§/@name ]§"/>

                 <append-xml-elements file="§[tmpfile.abs]§" grep="[§[appli.name]§.conf:§[jees.id]§]">
                     <only-if-not-exists>
                         /*:server/*:system-properties[@name='wmq.§[mdb.name]§.resource.adapter']
                     </only-if-not-exists>
                     <elements-selector>
                         /*:server/*:system-properties
                     </elements-selector>
                     <node-content>
                         <![CDATA[
                             <property name="wmq.§[mdb.name]§.rar" value="§[mqs.provider]§-§[mqs.version]§"/>
                             <property name="wmq.§[mdb.name]§.hostName" value="§[mqs.listen.fqdn]§"/>
                             <property name="wmq.§[mdb.name]§.port" value="§[mqs.listen.port.tcp]§"/>
                             <property name="wmq.§[mdb.name]§.queueManager" value="§[upper-case('§[ §[mdb]§/@ref-queue-manager ]§')]§"/>
                             <property name="wmq.§[mdb.name]§.channel" value="§[upper-case('§[ §[mdb]§/@ref-channel ]§')]§"/>
                             <property name="wmq.§[mdb.name]§.transportType" value="CLIENT"/>
                             <property name="wmq.§[mdb.name]§.userName" value="mqm"/>
                             <property name="wmq.§[mdb.name]§.queue" value="§[ §[mdb]§/@ref-queue ]§"/>
                         ]]>
                     </node-content>
                 </append-xml-elements>
            </foreach>
        </foreach>
    </order>

    <!-- deploy the mq rar, using the given mq provider, on the given jee-server.
         caller must define 'mqs.provider', which represents the mq provider.
         caller must define 'machine.cnx.ip', which represents the administration ip of the jee-server to configure.
         caller must define 'machine.cnx.kp', which represents the key-pair to connect on the jee-server.
         caller must define 'mq.rar.name', which represents the name of the mq rar to deploy.
         caller must define 'mq.rar.version', which represents the version of the mq rar.
         caller must define 'appli.name', which represents the application which need to be configured.
         caller must define 'jees.id', which represents the jee-server id.
         caller must define 'jees.owner', which represents the jee-server owner.
         caller must define 'jees.path', which represents the jee-server path.
         caller must define 'tmpfile.abs', which represents the jee-server configuration file. -->
    <order name="deploy-mq-rar-on-single-jee-server">
        <call orders="deploy-mq-rar-on-single-jee-server" sequence-descriptor="./§[mqs.provider]§/sd.xml"/>
    </order>

    <!-- declare a mq connection definition, using the given mq provider, into the given mq rar on the given jee-server.
         caller must define 'mqs.provider', which represents the mq provider.
         caller must define 'mq.rar.name', which represents the name of the mq rar.
         caller must define 'connection-definition.name', which represents the name of the connection definition.
         caller must define 'mqs.fqdn', which represents the fqdn of the mq-server to connect to.
         caller must define 'mqs.port', which represents the port of the mq-server to connect to.
         caller must define 'queue-manager.name', which represents the queue-manager of the mq-server to connect to.
         caller must define 'channel.name', which represents the channel name of the mq-server to connect to.
         caller must define 'user.name', which represents the name to authenticate with.
         caller must define 'user.pwd', which represents the password to authenticate with.
         caller must define 'security-domain.name', which represents the security-domain name to authenticate with.
         caller must define 'appli.name', which represents the application which need to be configured.
         caller must define 'jees.id', which represents the jee-server id.
         caller must define 'tmpfile.abs', which represents the jee-server configuration file. -->
    <order name="declare-connection-definition-on-single-jee-server">
        <call orders="declare-connection-definition-on-single-jee-server" sequence-descriptor="./§[mqs.provider]§/sd.xml"/>
    </order>

    <!-- declare a mq queue, using the given mq provider, into the given mq rar on the given jee-server.
         caller must define 'mqs.provider', which represents the mq provider.
         caller must define 'mq.rar.name', which represents the name of the mq rar.
         caller must define 'queue.name', which represents the queue name of the mq-server to connect to.
         caller must define 'appli.name', which represents the application which need to be configured.
         caller must define 'jees.id', which represents the jee-server id.
         caller must define 'tmpfile.abs', which represents the jee-server configuration file. -->
    <order name="declare-queue-on-single-jee-server">
        <call orders="declare-queue-on-single-jee-server" sequence-descriptor="./§[mqs.provider]§/sd.xml"/>
    </order>

</sequence>