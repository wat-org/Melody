<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>

<sequence basedir=".">

    <!-- deploy the oracle jdbc-driver on the given jboss eap server.
         caller must define 'machine.cnx.ip', which represents the administration ip of the jboss eap server.
         caller must define 'machine.cnx.kp', which represents the key-pair to connect on the jboss eap server.
         caller must define 'driver.name', which represents the name of the jdbc dirver.
         caller must define 'driver.version', which represents the version of the jdbc dirver.
         caller must define 'appli.name', which represents the application which need the jdbc driver.
         caller must define 'jees.id', which represents the jee-server id.
         caller must define 'jees.owner', which represents the jee-server owner.
         caller must define 'jees.path', which represents the jee-server path.
         caller must define 'tmpfile.abs', which represents the jee-server configuration file. -->
    <order name="deploy-jdbc-driver-on-single-jee-server">
        <!-- upload custom module directory and jar files  -->
        <upload host="§[machine.cnx.ip]§" login="§[jees.owner]§" keypair-name="§[machine.cnx.kp]§">
            <resources  src-basedir="files/"
                        match="**/§[driver.version]§/**"
                        dest-basedir="§[jees.path]§/modules/">
                <posix-permissions scope="files">600</posix-permissions>
                <posix-permissions scope="directories">700</posix-permissions>
            </resources>
        </upload>

        <!-- JBoss Configuration update -->
        <echo message="[§[appli.name]§.conf:§[jees.id]§] Deploy Oracle Server JDBC Driver." severity="info"/>
        <remove-xml-elements file="§[tmpfile.abs]§" grep="[§[appli.name]§.conf:§[jees.id]§]">
            <elements-selector>
                /*:server/*:profile/*:subsystem[exists(*:datasources)]/*:datasources/*:drivers/*:driver[@name='§[driver.name]§']
            </elements-selector>
        </remove-xml-elements>
        <append-xml-elements file="§[tmpfile.abs]§" grep="[§[appli.name]§.conf:§[jees.id]§]">
            <elements-selector>
                /*:server/*:profile/*:subsystem[exists(*:datasources)]/*:datasources/*:drivers
            </elements-selector>
            <node-content>
                <![CDATA[
                <driver name="§[driver.name]§" module="oracle.jdbc:§[driver.version]§">
                    <xa-datasource-class>oracle.jdbc.xa.client.OracleXADataSource</xa-datasource-class>
                </driver>
                ]]>
            </node-content>
        </append-xml-elements>
    </order>

    <!-- declare a datasource on the given jboss eap server.
         caller must define 'machine.cnx.ip', which represents the administration ip of the jboss eap server.
         caller must define 'machine.cnx.kp', which represents the key-pair to connect on the jboss eap server.
         caller must define 'driver.name', which represents the name of the jdbc dirver.
         caller must define 'datasource.name', which represents the name of the jdbc dirver.
         caller must define 'rdbs.fqdn', which represents the name of the jdbc dirver.
         caller must define 'rdbs.port', which represents the name of the jdbc dirver.
         caller must define 'rdbs.base', which represents the name of the jdbc dirver.
         caller must define 'user.name', which represents the name of the jdbc dirver.
         caller must define 'user.pwd', which represents the name of the jdbc dirver.
         caller must define 'security-domain.name', which represents the name of the security domain.
         caller must define 'appli.name', which represents the application which need the jdbc driver.
         caller must define 'jees.id', which represents the jee-server id.
         caller must define 'tmpfile.abs', which represents the jee-server configuration file. -->
    <order name="declare-datasource-on-single-jee-server">
        <echo message="[§[appli.name]§.conf:§[jees.id]§] Create hibernate.jdbc.dialect system properties" severity="info"/>
        <insert-xml-elements-before file="§[tmpfile.abs]§" grep="[§[appli.name]§.conf:§[jees.id]§]">
            <only-if-not-exists>
                /*:server/*:system-properties
            </only-if-not-exists>
            <!--  system properties must be place between extension and vault -->
            <elements-selector>
                /*:server/*:vault
            </elements-selector>
            <node-content>
                <![CDATA[
                <system-properties/>
                ]]>
            </node-content>
        </insert-xml-elements-before>
        <append-xml-elements file="§[tmpfile.abs]§" grep="[§[appli.name]§.conf:§[jees.id]§]">
            <only-if-not-exists>
                /*:server/*:system-properties[@name='hibernate.jdbc.dialect']
            </only-if-not-exists>
            <elements-selector>
                /*:server/*:system-properties
            </elements-selector>
            <node-content>
                <![CDATA[
                <property name="hibernate.jdbc.dialect" value="org.hibernate.dialect.Oracle10gDialect"/>
                ]]>
            </node-content>
        </append-xml-elements>

        <remove-xml-elements file="§[tmpfile.abs]§" grep="[§[appli.name]§.conf:§[jees.id]§]">
            <elements-selector>
                /*:server/*:profile/*:subsystem/*:datasources/*:xa-datasource[@pool-name="§[datasource.name]§"]
                /*:server/*:profile/*:subsystem/*:datasources/*:datasource[@pool-name="§[datasource.name]§"]
            </elements-selector>
        </remove-xml-elements>
        <insert-xml-elements-before file="§[tmpfile.abs]§" grep="[§[appli.name]§.conf:§[jees.id]§]">
            <elements-selector>
                /*:server/*:profile/*:subsystem/*:datasources/*:datasource[last()]
            </elements-selector>
            <node-content>
                <![CDATA[
                <datasource jndi-name="java:jboss/datasource/§[datasource.name]§" pool-name="§[datasource.name]§" enabled="true" use-java-context="true" jta="true">
                    <connection-url>jdbc:oracle:thin:@§[rdbs.fqdn]§:§[rdbs.port]§:§[rdbs.base]§</connection-url>
                    <!--
                    <security>
                        <user-name>§[user.name]§</user-name>
                        <password>§[user.pwd]§</password>
                    </security>
                    -->
                    <security>
                        <security-domain>§[security-domain.name]§</security-domain>
                    </security>
                    <connection-property name="oracle.net.authentication_services">
                        KERBEROS5
                    </connection-property>
                    <driver>§[driver.name]§</driver>
                    <transaction-isolation>TRANSACTION_READ_COMMITTED</transaction-isolation>
                    <validation>
                        <valid-connection-checker class-name="org.jboss.jca.adapters.jdbc.extensions.oracle.OracleValidConnectionChecker"/>
                        <exception-sorter class-name="org.jboss.jca.adapters.jdbc.extensions.oracle.OracleExceptionSorter"/>
                        <stale-connection-checker class-name="org.jboss.jca.adapters.jdbc.extensions.oracle.OracleStaleConnectionChecker"/>
                        <!--
                        <validate-on-match>true</validate-on-match>
                        <background-validation>true</background-validation>
                        <background-validation-millis>60000</background-validation-millis>
                        -->
                    </validation>
                </datasource>
                ]]>
            </node-content>
        </insert-xml-elements-before>
<!--
                    <connection-property name="oracle.net.kerberos5_mutual_authentication">
                        true
                    </connection-property>
                    <connection-property name="oracle.net.kerberos5_cc_name">
                        /tmp/krb5cc_501
                    </connection-property>
-->
    </order>

    <!-- declare an xa datasource on the given jboss eap server.
         caller must define 'machine.cnx.ip', which represents the administration ip of the jboss eap server.
         caller must define 'machine.cnx.kp', which represents the key-pair to connect on the jboss eap server.
         caller must define 'driver.name', which represents the name of the jdbc dirver.
         caller must define 'datasource.name', which represents the name of the jdbc dirver.
         caller must define 'rdbs.fqdn', which represents the name of the jdbc dirver.
         caller must define 'rdbs.port', which represents the name of the jdbc dirver.
         caller must define 'rdbs.base', which represents the name of the jdbc dirver.
         caller must define 'user.name', which represents the name of the jdbc dirver.
         caller must define 'user.pwd', which represents the name of the jdbc dirver.
         caller must define 'security-domain.name', which represents the name of the security domain.
         caller must define 'appli.name', which represents the application which need the jdbc driver.
         caller must define 'jees.id', which represents the jee-server id.
         caller must define 'tmpfile.abs', which represents the jee-server configuration file. -->
    <order name="declare-xa-datasource-on-single-jee-server">
        <echo message="[§[appli.name]§.conf:§[jees.id]§] Create hibernate.jdbc.dialect system properties" severity="info"/>
        <insert-xml-elements-before file="§[tmpfile.abs]§" grep="[§[appli.name]§.conf:§[jees.id]§]">
            <only-if-not-exists>
                /*:server/*:system-properties
            </only-if-not-exists>
            <!--  system properties must be place between extension and vault -->
            <elements-selector>
                /*:server/*:vault
            </elements-selector>
            <node-content>
                <![CDATA[
                <system-properties/>
                ]]>
            </node-content>
        </insert-xml-elements-before>
        <append-xml-elements file="§[tmpfile.abs]§" grep="[§[appli.name]§.conf:§[jees.id]§]">
            <only-if-not-exists>
                /*:server/*:system-properties[@name='hibernate.jdbc.dialect']
            </only-if-not-exists>
            <elements-selector>
                /*:server/*:system-properties
            </elements-selector>
            <node-content>
                <![CDATA[
                <property name="hibernate.jdbc.dialect" value="org.hibernate.dialect.Oracle10gDialect"/>
                ]]>
            </node-content>
        </append-xml-elements>

        <remove-xml-elements file="§[tmpfile.abs]§" grep="[§[appli.name]§.conf:§[jees.id]§]">
            <elements-selector>
                /*:server/*:profile/*:subsystem/*:datasources/*:xa-datasource[@pool-name="§[datasource.name]§"]
            </elements-selector>
        </remove-xml-elements>
        <insert-xml-elements-before file="§[tmpfile.abs]§" grep="[§[appli.name]§.conf:§[jees.id]§]">
            <elements-selector>
                /*:server/*:profile/*:subsystem/*:datasources/*:drivers
            </elements-selector>
            <node-content>
                <![CDATA[
                <xa-datasource jndi-name="java:jboss/datasource/§[datasource.name]§" pool-name="§[datasource.name]§" enabled="true" use-java-context="true">
                    <xa-datasource-property name="URL">
                        jdbc:oracle:thin:@§[rdbs.fqdn]§:§[rdbs.port]§:§[rdbs.base]§
                    </xa-datasource-property>
                    <xa-datasource-property name="User">§[user.name]§</xa-datasource-property>
                    <xa-datasource-property name="Password">§[user.pwd]§</xa-datasource-property>
                    <!--
                    <xa-datasource-property name="oracle.net.authentication_services">
                        KERBEROS5
                    </xa-datasource-property>
                    <security>
                        <security-domain>§[security-domain.name]§</security-domain>
                    </security>
                    -->
                    <driver>§[driver.name]§</driver>
                    <transaction-isolation>TRANSACTION_READ_COMMITTED</transaction-isolation>
                    <recovery>
                        <recover-credential>
                            <user-name>recovery</user-name>
                            <password>password</password>
                        </recover-credential>
                    </recovery>
                    <validation>
                        <valid-connection-checker class-name="org.jboss.jca.adapters.jdbc.extensions.oracle.OracleValidConnectionChecker"/>
                        <exception-sorter class-name="org.jboss.jca.adapters.jdbc.extensions.oracle.OracleExceptionSorter"/>
                        <stale-connection-checker class-name="org.jboss.jca.adapters.jdbc.extensions.oracle.OracleStaleConnectionChecker"/>
                    </validation>
                </xa-datasource>
                ]]>
            </node-content>
        </insert-xml-elements-before>
        <!-- The rdbserver.oracle extension automatically configures a user for the xa recovery.
        This user must be used in the xa-datasource's recovery configuration. -->
    </order>

</sequence>