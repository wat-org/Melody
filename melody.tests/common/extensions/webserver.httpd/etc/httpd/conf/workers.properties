# Worker de reference
ps=/
worker.modele.port=8009
worker.modele.host=localhost
worker.modele.type=ajp13
worker.modele.lbfactor=1
############################################
############################################
# general worker configuration
# ** from Integration (AIX) **
############################################
#worker.modele.socket_keepalive=true
#worker.modele.socket_timeout=45
#worker.modele.connection_pool_timeout=600
#worker.modele.retries=1
#worker.modele.ping_mode=I
#worker.modele.ping_timeout=45000
#worker.modele.connection_ping_interval=45
worker.modele.method=Session
worker.modele.sticky_session=true
worker.modele.sticky_session_force=false

############################################
############################################


############################################
############################################
# general worker configuration
# ** from CES SIRHEN (Versailles) **
############################################
# This directive should be used when you have a firewall between your webserver and the Tomcat engine, who tend to drop inactive connections.
# This flag will tell the Operating System to send KEEP_ALIVE messages on inactive connections, and thus prevent the firewall to cut inactive connections.
# The default intervals and algorithms for KEEP_ALIVE messages are platform specific. For RedHat, see net.ipv4.tcp_keepalive_time in /etc/sysctl.conf
worker.modele.socket_keepalive=true
# CES : Note that this parameter should have no effect since the tcp_keepalive_time is set to 30 minutes and the connection_pool_timeout is set to 10 minutes.

# Will close pool connection if their idle time is higher than 600 seconds (10 minutes)
# You should keep this time interval in sync with the connectionTimeout attribute of your AJP connector in Tomcat's server.xml.
worker.modele.connection_pool_timeout=600

# The maximum number of times that the worker will send a request to Tomcat in case of a communication error.
# Each retry will be done over another connection (e.g. another socket, but the same worker).
# The first time already gets counted, so retries=2 means one retry after error.
# Before a retry, the worker waits for a configurable sleeping time (see .retry_interval ).
# retries=2 is the default value.
worker.modele.retries=2

# The amount of time in milliseconds the worker sleeps before doing any retry.
# retry_interval=100 is the default value.
worker.modele.retry_interval=20


# This flag determines, under which conditions established connections are probed to ensure they are still working.
# The probe is done with an empty AJP13 packet (CPing) and expects to receive an appropriate answer (CPong) within some timeout.
# C => the connection will be probed once after connecting to the backend.
# P => the connection will be probed before sending each request to the backend.
# I => the connection will be probed during the regular internal maintenance cycle, but only if it is idle longer than connection_ping_interval.
# A => all probes are enabled.
worker.modele.ping_mode=A

# Timeout in milliseconds used when waiting for the CPong answer of a CPing connection probe.
worker.modele.ping_timeout=15000
# CES : 15 seconds can be considered as a very long time to wait for the CPong answer.
# But, when the backend is performing GC, such amount of time is necessary.

# Socket connect timeout in milliseconds used for the communication channel between JK and remote host.
worker.modele.socket_connect_timeout=5000
# CES : meaning that network pb or backend failure will be detected quickly 
# when a backend fails, it will take at least 'worker.modele.socket_connect_timeout' millis to detect the failure and to send to request to another backend

# Socket timeout in milliseconds used for the communication channel between JK and remote host.
# socket_timeout=0 is the default value.
#worker.modele.socket_timeout=0
# CES : meaning that the worker will wait for the response forever

############################################
############################################

# Liste des workers
worker.list=Status,§[
	string-join(
		for $application in §[machine]§/web-server/applications/application
		return replace($application/@name, '[.-]', '_'),
		',' )
]§

# Worker status pour la supervision (de type status)
worker.Status.type=status

# Worker pour les applications (de type load balancer)
§[
	string-join(
		for $application in §[machine]§/web-server/applications/application
		return concat(	'worker.', replace($application/@name, '[.-]', '_'), '.type=lb', codepoints-to-string(10),
				'worker.', replace($application/@name, '[.-]', '_'), '.method=Session', codepoints-to-string(10),
				'worker.', replace($application/@name, '[.-]', '_'), '.sticky_session=true', codepoints-to-string(10),
				'worker.', replace($application/@name, '[.-]', '_'), '.sticky_session_force=false', codepoints-to-string(10),
				'worker.', replace($application/@name, '[.-]', '_'), '.balance_workers=', 
					string-join(
						for $machine in ./environment//instance[ exists(§[backend_node]§/applications/application[@name=$application/@name]) ]
						return	string-join(
								for $backend in $machine/§[backend_node]§ [ applications/application[@name=$application/@name] ]
								return concat(	replace($application/@name, '[.-]', '_'),
										'_on_',
										replace(melody:getNetworkDeviceElementByName($machine, melody:getAttributeValue($backend/listen-on/@device, 'eth0'))/@ip, '[.]', '_'), 
										'_port_',
										melody:getAttributeValue($backend/listen-on/@port-offset, '0') ), 
								','	),
						','	),
				codepoints-to-string(10),
				codepoints-to-string(10),
				string-join(
					for $machine in ./environment//instance[ exists(§[backend_node]§/applications/application[@name=$application/@name]) ]
					return	string-join(
							for $backend in $machine/§[backend_node]§ [ applications/application[@name=$application/@name] ]
							return concat(	'worker.', replace($application/@name, '[.-]', '_'), '_on_', replace(melody:getNetworkDeviceElementByName($machine, melody:getAttributeValue($backend/listen-on/@device, 'eth0'))/@ip, '[.]', '_'), '_port_', melody:getAttributeValue($backend/listen-on/@port-offset, '0'), '.host=', melody:getNetworkDeviceElementByName($machine, melody:getAttributeValue($backend/listen-on/@device, 'eth0'))/@ip, codepoints-to-string(10),
									'worker.', replace($application/@name, '[.-]', '_'), '_on_', replace(melody:getNetworkDeviceElementByName($machine, melody:getAttributeValue($backend/listen-on/@device, 'eth0'))/@ip, '[.]', '_'), '_port_', melody:getAttributeValue($backend/listen-on/@port-offset, '0'), '.port=', number(melody:getAttributeValue($backend/listen-on/socket[@name='ajp']/@port, '8009'))+number(melody:getAttributeValue($backend/listen-on/@port-offset, '0')), codepoints-to-string(10),
									'worker.', replace($application/@name, '[.-]', '_'), '_on_', replace(melody:getNetworkDeviceElementByName($machine, melody:getAttributeValue($backend/listen-on/@device, 'eth0'))/@ip, '[.]', '_'), '_port_', melody:getAttributeValue($backend/listen-on/@port-offset, '0'), '.route=', replace(melody:getNetworkDeviceElementByName($machine, melody:getAttributeValue($backend/listen-on/@device, 'eth0'))/@ip, '[.]', '_'), '_port_', melody:getAttributeValue($backend/listen-on/@port-offset, '0'), codepoints-to-string(10),
									'worker.', replace($application/@name, '[.-]', '_'), '_on_', replace(melody:getNetworkDeviceElementByName($machine, melody:getAttributeValue($backend/listen-on/@device, 'eth0'))/@ip, '[.]', '_'), '_port_', melody:getAttributeValue($backend/listen-on/@port-offset, '0'), '.reference=worker.modele', codepoints-to-string(10)    ), 
							codepoints-to-string(10) ),
					codepoints-to-string(10) ),
				codepoints-to-string(10) ),
		codepoints-to-string(10) )
]§
