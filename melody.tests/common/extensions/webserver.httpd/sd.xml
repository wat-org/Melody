<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>

<sequence basedir=".">

    <property name="backend_node" value="jee-server"/>

    <order name="deploy-web-servers">
        <call orders="deploy-httpd-servers"/>
    </order>

    <order name="start-web-servers">
        <call orders="start-httpd-servers"/>
    </order>

    <order name="stop-web-servers">
        <call orders="stop-httpd-servers"/>
    </order>

    <order name="do-operation-on-web-servers">
        <call orders="do-operation-on-httpd-servers"/>
    </order>

    <!-- deploy each web-servers.
         caller can define callback 'callback.server' in order to perform extra actions on each web-servers.
         caller can define callback 'callback.application' in order to perform application related actions on each web-servers, if applications are declared on a web-server.
         caller can define 'machine_match_criteria' to target a subset of machines. -->
    <order name="deploy-httpd-servers">
        <echo message="Creating Apache Httpd Servers ..."/>
        <call orders="do-operation-on-httpd-servers">
            <param name="callback.ws" value="§[melody:getSequenceDescriptorPath()]§::deploy-httpd-server-on-single-machine"/>
        </call>
        <echo message="-- Apache Httpd Servers successfully created."/>
    </order>

    <!-- start each web-servers.
         caller can define 'machine_match_criteria' to target a subset of machines. -->
    <order name="start-httpd-servers">
        <echo message="Starting Apache Httpd Servers ..."/>
        <call orders="do-operation-on-httpd-servers">
            <param name="callback.ws" value="§[melody:getSequenceDescriptorPath()]§::start-httpd-server-on-single-machine"/>
        </call>
        <echo message="-- Apache Httpd Servers successfully started."/>
    </order>

    <!-- stop each web-servers.
         caller can define 'machine_match_criteria' to target a subset of machines. -->
    <order name="stop-httpd-servers">
        <echo message="Stopping Apache Httpd Servers ..."/>
        <call orders="do-operation-on-httpd-servers">
            <param name="callback.ws" value="§[melody:getSequenceDescriptorPath()]§::stop-httpd-server-on-single-machine"/>
        </call>
        <echo message="-- Apache Httpd Servers successfully stopped."/>
    </order>

    <!-- loop on each machines where a web-server is declared.
         caller must define callback 'callback.ws'.
         caller can define 'machine_match_criteria' to target a subset of machines. -->
    <order name="do-operation-on-httpd-servers">
        <call orders="select-running-machines" sequence-descriptor="../machines/sd.xml">
            <param name="machine_eligible_criteria"   value="exists(web-server)"/>
            <param name="callback.machine"            value="§[melody:getSequenceDescriptorPath()]§::do-operation-on-httpd-server-on-single-machine"/>
        </call>
    </order>

    <order name="do-operation-on-httpd-server-on-single-machine">
        <property name="ws.path"                 value="§[ §[machine]§/web-server/@path ]§"/>
        <property name="ws.owner"                value="§[ §[machine]§/web-server/owner/@login ]§"/>
        <property name="ws.owner.id"             value="§[ §[machine]§/credentials/user[@name='§[ws.owner]§']/@id ]§"/>
        <property name="ws.group"                value="§[ §[machine]§/credentials/user[@name='§[ws.owner]§']/@ref-group-name ]§"/>
        <property name="ws.group.id"             value="§[ §[machine]§/credentials/group[@name='§[ws.group]§']/@id ]§"/>
        <property name="ws.listen.device"        value="§[ melody:getAttributeValue(§[machine]§/web-server/listen-on/@device, 'eth0') ]§"/>
        <property name="ws.listen.port-offset"   value="§[ melody:getAttributeValue(§[machine]§/web-server/listen-on/@port-offset, '0') ]§"/>
        <property name="ws.listen.port.http"     value="§[ number(melody:getAttributeValue(§[machine]§/web-server/listen-on/socket[@name='http']/@port, '80')) + §[ws.listen.port-offset]§ ]§"/>
        <property name="ws.listen.ip"            value="§[ melody:getNetworkDeviceElementByName(§[machine]§, '§[ws.listen.device]§')/@ip ]§"/>
        <property name="ws.listen.fqdn"          value="§[ melody:getNetworkDeviceElementByName(§[machine]§, '§[ws.listen.device]§')/@fqdn ]§"/>
        <property name="ws.log.level"            value="§[ melody:getAttributeValue(§[machine]§/web-server/log/@level, 'warn') ]§"/>

        <call orders="§[substring-after('§[callback.ws]§','::')]§" sequence-descriptor="§[substring-before('§[callback.ws]§','::')]§"/>
    </order>

    <property name="callback.server"        value="§[ melody:getSequenceDescriptorPath() ]§::customize-httpd-server.default-callback"/>
    <property name="callback.application"   value="§[ melody:getSequenceDescriptorPath() ]§::customize-httpd-application.default-callback"/>

    <order name="deploy-httpd-server-on-single-machine">
        <!-- install -->
        <call orders="install-package-on-single-machine"      sequence-descriptor="../packages/sd.xml">
            <param name="package.name" value="httpd"/>
        </call>
        <call orders="install-package-on-single-machine"      sequence-descriptor="../packages/sd.xml">
            <param name="package.name" value="mod_jk-ap22"/>
        </call>

        <!-- configure -->
        <ssh description="[configure:httpdl-server:§[machine.cnx.ip]§]" host="§[machine.cnx.ip]§" login="root" keypair-name="§[machine.cnx.kp]§">
            <exec command="rm -vf §[ws.path]§/conf.d/proxy_ajp.conf"/>
            <exec command="rm -vf §[ws.path]§/conf.d/welcome.conf"/>
            <exec command="setenforce 0"/>
        </ssh>

        <upload host="§[machine.cnx.ip]§" login="root" keypair-name="§[machine.cnx.kp]§">
            <resources  src-basedir="etc/httpd/"
                        match="**"
                        dest-basedir="§[ws.path]§/">
                <posix-permissions scope="files">640</posix-permissions>
                <include match="conf/httpd.conf"         template="y"/>
                <include match="conf/workers.properties" template="y"/>
                <include match="conf.d/0-log.conf"       template="y"/>
                <!-- each application will customize this file. we don't need it now -->
                <exclude match="conf.d/2-generic-application.conf"/>
            </resources>
            <resources  src-basedir="var/www/"
                        match="**"
                        dest-basedir="/var/www/">
                <posix-group scope="all">§[ws.owner.id]§</posix-group>
                <posix-user scope="all">§[ws.group.id]§</posix-user>
                <posix-permissions scope="directories">750</posix-permissions>
            </resources>
        </upload>

        <!-- customize / server scope -->
        <call orders="§[substring-after('§[callback.server]§','::')]§" sequence-descriptor="§[substring-before('§[callback.server]§','::')]§"/>

        <!-- customize / application scope -->
        <foreach    items="§[machine]§/web-server/applications/application"
                    item-name="application"
                    max-par="1">
            <property name="appli.name"        value="§[§[application]§/@name]§"/>
            <property name="appli.worker"      value="§[replace('§[appli.name]§', '[.-]', '_') ]§"/>

            <!-- deploy standard application configuration -->
            <upload host="§[machine.cnx.ip]§" login="root" keypair-name="§[machine.cnx.kp]§">
                <resources  src-basedir="etc/httpd/"
                            match="conf.d/2-generic-application.conf"
                            dest-basedir="§[ws.path]§/"
                            dest-name="conf.d/2-§[appli.name]§.conf"
                            template="y">
                    <posix-permissions scope="files">640</posix-permissions>
                </resources>
            </upload>

            <!-- customize application -->
            <property name="cb.order"        value="§[substring-after('§[callback.application]§','::')]§"/>
            <property name="cb.sd"           value="§[substring-before('§[callback.application]§','::')]§"/>
            <property name="cb.order"        value="§[
             if ('§[cb.order]§' = 'customize-httpd-application.default-callback') then
               '§[cb.order]§'
             else
               '§[cb.order]§.§[appli.name]§'
            ]§"/>

            <call orders="§[cb.order]§" sequence-descriptor="§[cb.sd]§"/>

            <echo message="+ Application '§[appli.name]§' successfully deployed on Apache Httpd Server on machine '§[machine.id]§'."/>
        </foreach>

        <!-- (re)start server -->
        <call orders="start-httpd-server-on-single-machine"/>

        <echo message="++ Apache Httpd Server successfully installed and configured on machine '§[machine.id]§'."/>
    </order>

    <order name="customize-httpd-server.default-callback">
        <!-- nothing to do -->
    </order>

    <order name="customize-httpd-application.default-callback">
        <!-- nothing to do -->
    </order>


    <order name="start-httpd-server-on-single-machine">
        <call orders="start-service-on-single-machine" sequence-descriptor="../services/sd.xml">
            <param name="service.name" value="httpd"/>
        </call>

        <echo message="+ Apache Httpd Server successfully started on '§[machine.id]§'."/>
    </order>


    <order name="stop-httpd-server-on-single-machine">
        <call orders="stop-service-on-single-machine" sequence-descriptor="../services/sd.xml">
            <param name="service.name" value="httpd"/>
        </call>

        <echo message="+ Apache Httpd Server successfully stopped on '§[machine.id]§'."/>
    </order>

</sequence>