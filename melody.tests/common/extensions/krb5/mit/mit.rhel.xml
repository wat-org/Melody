<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>

<sequence basedir=".">

    <order name="deploy-kerberos-domain-controller-on-single-machine">
        <!-- install -->
        <install-package>
            <param name="package.name" value="krb5-server"/>
        </install-package>
        <install-package>
            <param name="package.name" value="rng-tools"/>
        </install-package>

        <!-- configure-->
        <upload host="§[machine.cnx.ip]§" login="root" keypair-name="§[machine.cnx.kp]§">
            <resources  src-basedir="etc/"
                        match="krb5.conf"
                        dest-basedir="/etc/"
                        template="y">
                <posix-permissions scope="files">644</posix-permissions>
            </resources>

            <resources  src-basedir="var/kerberos/krb5kdc/"
                        match="**"
                        dest-basedir="/var/kerberos/krb5kdc/"
                        template="y">
                <posix-permissions scope="files">600</posix-permissions>
            </resources>

            <resources  src-basedir="etc/sysconfig/"
                        match="rngd"
                        dest-basedir="/etc/sysconfig/">
                <posix-permissions scope="files">644</posix-permissions>
            </resources>
        </upload>

        <!-- kerberos database creation requires entropy. So we start rngd first-->
        <start-service>
            <param name="service.name" value="rngd"/>
        </start-service>

        <!-- create krb5 database and super admin-->
        <synchronize scope="GLOBAL" lock-id="§[machine.cnx.ip]§.kerberos">
            <ssh description="[configure:kerberos-domain-controller:§[machine.cnx.ip]§]" host="§[machine.cnx.ip]§" login="root" keypair-name="§[machine.cnx.kp]§">
                <exec>
                    <![CDATA[
[ -f /var/kerberos/krb5kdc/principal ] && {
  echo "Database that stores keys for the Kerberos realm already created."
} || {
  kdb5_util create -s << EOF
§[kdc.admin.pwd]§
§[kdc.admin.pwd]§
EOF
  echo "Database that stores keys for the Kerberos realm created."
}

kadmin.local -q "listpols" | grep "users" 1>/dev/null && {
  echo "'users' policy already created."
} || {
  kadmin.local -q "addpol -minlength 5 users" << EOF
§[kdc.admin.pwd]§
§[kdc.admin.pwd]§
EOF
  echo "'users' policy created."
}

kadmin.local -q "listpols" | grep "services" 1>/dev/null && {
  echo "'services' policy already created."
} || {
  kadmin.local -q "addpol -minlength 15 services" << EOF
§[kdc.admin.pwd]§
§[kdc.admin.pwd]§
EOF
  echo "'services' policy created."
}

kadmin.local -q "listprincs" | grep "§[kdc.admin.login]§" 1>/dev/null && {
  echo "First principal (§[kdc.admin.login]§) already created."
} || {
  kadmin.local -q "addprinc -policy users §[kdc.admin.login]§" << EOF
§[kdc.admin.pwd]§
§[kdc.admin.pwd]§
EOF
  echo "First principal (§[kdc.admin.login]§) created."
}

exit 0
                    ]]>
                </exec>
            </ssh>
        </synchronize>

        <!-- start -->
        <start-service>
            <param name="service.name" value="krb5kdc"/>
        </start-service>
        <start-service>
            <param name="service.name" value="kadmin"/>
        </start-service>

        <echo message="++ Kerberos Domain Controller successfully installed and configured on machine '§[machine.id]§'."/>
    </order>



    <order name="deploy-kerberos-host-on-single-machine">
        <!-- install -->
        <install-package>
            <param name="package.name" value="krb5-workstation"/>
        </install-package>

        <!-- configure -->
        <upload host="§[machine.cnx.ip]§" login="root" keypair-name="§[machine.cnx.kp]§">
            <resources  src-basedir="etc/"
                        match="{krb5.conf,krb.realms}"
                        dest-basedir="/etc/"
                        template="y">
                <posix-permissions scope="files">644</posix-permissions>
            </resources>
        </upload>

        <synchronize scope="GLOBAL" lock-id="§[kdc.machine.cnx.ip]§.kerberos">
            <ssh description="[configure:kerberos-host:§[machine.cnx.ip]§]" host="§[machine.cnx.ip]§" login="root" keypair-name="§[machine.cnx.kp]§">
                <exec>
                    <![CDATA[
# Create the principal of the machine and add it into the keytab file
KTFILE=/etc/krb5.keytab

echo "§[kdc.admin.pwd]§" | kinit §[kdc.admin.login]§

echo "§[kdc.admin.pwd]§" | kadmin -q "listprincs" | grep "host/§[machine.fqdn]§" 1>/dev/null && {
  echo -e "Principal (host/§[machine.fqdn]§) already created."
} || {
  echo "§[kdc.admin.pwd]§" | kadmin -q "addprinc -randkey -policy services host/§[machine.fqdn]§"
}

rm -vf "${KTFILE}"

echo "§[kdc.admin.pwd]§" | kadmin -q "ktadd -k ${KTFILE} host/§[machine.fqdn]§"

chmod 600 "${KTFILE}"


kdestroy


# Declare the domain as trusted so that firefox can do SSO/Kerberos

[ ! -w ".mozilla/firefox/profiles.ini" ] && exit 0

PROFILE_PATH=".mozilla/firefox/$(grep Path  ".mozilla/firefox/profiles.ini" | cut -d '=' -f 2)/prefs.js"

grep "network.negotiate-auth.delegation-uris" "$PROFILE_PATH" || echo 'user_pref("network.negotiate-auth.delegation-uris", ".§[kdc.domain]§");' >> $PROFILE_PATH
grep "network.negotiate-auth.trusted-uris" "$PROFILE_PATH" || echo 'user_pref("network.negotiate-auth.trusted-uris", ".§[kdc.domain]§");' >> $PROFILE_PATH

exit 0
                    ]]>
                </exec>
            </ssh>
        </synchronize>

        <echo message="++ Machine '§[machine.id]§' successfully registered in the Kerberos realm."/>
    </order>


    <property name="password"    value=""/>
    <property name="genkeytab"   value="false"/>
    <order name="create-kerberos-principal-on-single-kdc">
        <!--  Register the given principal into the given realm.
              If no password is created, a keytab will be generated.
              The generated keytab will be located on the KDC filesystem.
                - principal : jeeusra, host/ip-192-168-122-2.cloud.local, postgres/ip-192-168-122-2.cloud.local, HTTP/ip-192-168-122-2.cloud.local, ...
                - password: the password of the given principal (useful if the principal is a user; e.g. policy must be equals to 'users').
                - realm: CLOUD.LOCAL, ...
                - policy: only accept 'users' or 'services'
                - genkeytab: if true, a keytab will be generated in /root/.krb5/§[principal]§.keytab on the KDC
        -->
        <property name="kdc"                  value="./environment//instance[exists(kerberos-domain-controller[@realm='§[realm]§'])]"/>
        <property name="kdc.machine.cnx.ip"   value="§[ melody:getNetworkActivationHost( §[kdc]§ ) ]§"/>
        <property name="kdc.machine.cnx.kp"   value="§[ melody:getInstanceKeyPairName( §[kdc]§ ) ]§"/>

        <!-- kerberos doesn't support concurrent execution -->
        <synchronize scope="GLOBAL" lock-id="§[kdc.machine.cnx.ip]§.kerberos">
            <ssh description="[kerberos-create-principal:§[principal]§@§[realm]§]" host="§[kdc.machine.cnx.ip]§" login="root" keypair-name="§[kdc.machine.cnx.kp]§">
                <exec>
                    <![CDATA[
kadmin.local -q "listprincs" | grep "§[principal]§" 1>/dev/null && {
  echo -e "Principal '§[principal]§' already created. Nothing to do. Exit."
  exit 0
}

PASS="-pw §[password]§"
[ "§[password]§" = "" ] && PASS="-randkey"
kadmin.local -q "addprinc -policy §[policy]§ ${PASS} §[principal]§"
[ "§[genkeytab]§" = "true" ] && {
  umask 0077
  KTFILE="/root/.krb5/§[principal]§.keytab"
  mkdir -p "$(dirname "${KTFILE}")"
  rm -vf "${KTFILE}"
  kadmin.local -q "ktadd -k ${KTFILE} §[principal]§"
  exit $?
}

exit 0
                    ]]>
                </exec>
            </ssh>
        </synchronize>

        <echo message="+ Principal '§[principal]§@§[realm]§' successfully created."/>
    </order>

    <order name="deploy-kerberos-principal-keytab-on-single-machine">
        <!--  Upload the given principal's keytab to the given remote system.
              The keytab must be located on the KDC filesystem (see order 'create-kerberos-principal-on-single-kdc' above).
                - principal : postgres/ip-192-168-122-2.cloud.local, HTTP/ip-192-168-122-2.cloud.local, toto, ...
                - realm: CLOUD.LOCAL, ...
                - machine.cnx.ip: the remote system ip, where the keytab will be uploaded
                - machine.cnx.kp: the keypair to connect on the remote system
                - cnx.user: the user to connect on the remote system
                - dest.path: the full filepath where the keytab will be uploaded
        -->
        <property name="kdc"                  value="./environment//instance[exists(kerberos-domain-controller[@realm='§[realm]§'])]"/>
        <property name="kdc.machine.cnx.ip"   value="§[ melody:getNetworkActivationHost( §[kdc]§ ) ]§"/>
        <property name="kdc.machine.cnx.kp"   value="§[ melody:getInstanceKeyPairName( §[kdc]§ ) ]§"/>

        <property name="tmpfile.rel"         value="§[ melody:newTmpFile() ]§"/>
        <property name="workingfolder.abs"   value="§[ melody:getWorkingFolder() ]§"/>
        <!-- download keytab from KDC in a local tmp file -->
        <download host="§[kdc.machine.cnx.ip]§" login="root" keypair-name="§[kdc.machine.cnx.kp]§">
            <resources  src-basedir="/root/.krb5/"
                        match="§[principal]§.keytab"
                        dest-basedir="§[workingfolder.abs]§/"
                        dest-name="§[tmpfile.rel]§"/>
        </download>
        <!-- upload local keytab tmp file to target machine -->
        <upload host="§[machine.cnx.ip]§" login="§[cnx.user]§" keypair-name="§[machine.cnx.kp]§">
            <resources  src-basedir="§[workingfolder.abs]§/"
                        match="§[tmpfile.rel]§"
                        dest-name="§[dest.path]§">
                <posix-permissions scope="files">600</posix-permissions>
            </resources>
        </upload>

        <echo message="+ Keytab for principal '§[principal]§@§[realm]§' successfully deployed on '§[machine.cnx.ip]§:§[dest.path]§'."/>
    </order>

</sequence>