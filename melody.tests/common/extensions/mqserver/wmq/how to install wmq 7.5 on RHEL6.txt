-----------------------------------------------------------
Install WMQ software
-----------------------------------------------------------
require a RHEL-6 with 20G disk

# 7.5.0.2 binaries
# copy /Cloud/binaries/webspheremq/mqadv_dev75_linux_x86-64.tar.gz in VM:/tmp
# 7.5.0.4 patch
# copy /Cloud/binaries/webspheremq/7.5.0-WS-MQ-LinuxX64-FP0004.tar.gz in VM:/tmp
cd /tmp
tar -xvzf /tmp/mqadv_dev75_linux_x86-64.tar.gz
tar -xvzf /tmp/7.5.0-WS-MQ-LinuxX64-FP0004.tar.gz

# special trick for licensing
mkdir -p /tmp/mq_license_7.5.0/license/
touch /tmp/mq_license_7.5.0/license/status.dat

# install
yum localinstall -y MQSeriesRuntime-7.5.0-2.x86_64.rpm MQSeriesServer-7.5.0-2.x86_64.rpm
yum localinstall -y ./MQSeriesRuntime-U200491-7.5.0-4.x86_64.rpm ./MQSeriesServer-U200491-7.5.0-4.x86_64.rpm 

# check requirements with "/opt/mqm/bin/mqconfig"
yum install bc

# change the limits of user mqm in /etc/security/limits.conf 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# webshpere mq specific
mqm        soft    nofile           10240
mqm        hard    nofile           10240
mqm        soft    nproc            4096
mqm        hard    nproc            4096
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# modify system settings in /etc/sysctl.conf 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# webshpere mq specific
#kernel.shmmni = 4096
#kernel.shmall = 2097152
#kernel.shmmax = 268435456
kernel.sem = 500 256000 250 1024
fs.file-max = 524288
net.ipv4.tcp_keepalive_time=300
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# chose this installation to be the primary installation on the system
/opt/mqm/bin/setmqinst -i -p /opt/mqm

### setup mqm home
su - mqm
cp -v /etc/skel/.b* ~mqm/
chmod g-w ~mqm/.b*
mkdir ~mqm/.ssh
touch ~mqm/.ssh/authorized_keys
chmod 700 ~mqm/.ssh/
chmod 600 ~mqm/.ssh/authorized_keys 
chmod 700 /var/mqm

# modify ~mqm/.bashrc 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# set the websphere primary installation environment
. setmqenv -s -k
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

### allow ssh with private key on mqm
# as root
# install package containing 'audit2allow'
yum install -y policycoreutils-python

# restore selinux attrs
restorecon -FRvv /var/mqm/

# edit test.txt and put it inside
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
type=AVC msg=audit(1426169005.215:2710): avc:  denied  { read } for  pid=6247 comm="sshd" name="authorized_keys" dev=dm-0 ino=14967 scontext=unconfined_u:system_r:sshd_t:s0-s0:c0.c1023 tcontext=system_u:object_r:var_t:s0 tclass=file
type=AVC msg=audit(1426169162.035:2741): avc:  denied  { open } for  pid=6247 comm="sshd" name="authorized_keys" dev=dm-0 ino=14967 scontext=unconfined_u:system_r:sshd_t:s0-s0:c0.c1023 tcontext=system_u:object_r:var_t:s0 tclass=file
type=AVC msg=audit(1426168573.074:2658): avc:  denied  { getattr } for  pid=6247 comm="sshd" path="/var/mqm/.ssh/authorized_keys" dev=dm-0 ino=14967 scontext=unconfined_u:system_r:sshd_t:s0-s0:c0.c1023 tcontext=system_u:object_r:var_t:s0 tclass=file
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

cat test.txt | audit2allow -a -M authorize-mqmssh
semodule -i authorize-mqmssh.pp
# from a remote host, try to connect to your machine as mqm
ssh -o UserKnownHostsFile=known_hosts -i id_rsa mqm@YOUR_VM_IP
# it works !!

### deploy the startup script
# as root
# copy /Cloud/binaries/webspheremq/msl1.tar.gz in VM:/tmp
cd /tmp
tar -xvzf msl1.tar.gz

# install 
yum localinstall -y MSL1/MSL1-1.0.1-1.noarch.rpm

# use the service name 'wmq' instead of 'ibm.com-WebSphere_MQ'
cd /etc/conf.d/
ln -vs ibm.com-WebSphere_MQ wmq.conf

cd /etc/init.d/
ln -vs ibm.com-WebSphere_MQ wmq

chkconfig ibm.com-WebSphere_MQ off
chkconfig --del ibm.com-WebSphere_MQ 
chkconfig --add wmq 
chkconfig wmq on





##########################
# installation tests

# install samples
yum localinstall -y MQSeriesSamples-7.5.0-2.x86_64.rpm

# as 'mqm'
su - mqm

# create & start the queue manager
crtmqm QMA
strmqm QMA

# define a local queue
runmqsc QMA <<+++EOF+++
DEFINE QLOCAL (QUEUE1)
end
+++EOF+++

# send message in the queue
cd /opt/mqm/samp/bin
./amqsput QUEUE1 QMA <<+++EOF+++
salut les filles
messages1
messages2

+++EOF+++

# retrieve the message
./amqsget QUEUE1 QMA

# go back as root
exit

# remove MQSamples
yum localinstall -y MQSeriesSamples-7.5.0-2.x86_64.rpm





###########################
# queue manager setup

# create the queue manager
crtmqm §[queue-manager.name.uc]§
# start the queue manager
strmqm §[queue-manager.name.uc]§

# set the default listener @ip/port and tell him to start/stop when the queue manager start and stop
# TODO: each queue manager should listen on its own port
runmqsc §[queue-manager.name.uc]§ <<+++EOF+++
alter listener(SYSTEM.DEFAULT.LISTENER.TCP) trptype(TCP) ipaddr(§[mqs.listen.ip]§) port(§[mqs.listen.port.tcp]§) control(QMGR)
display listener(SYSTEM.DEFAULT.LISTENER.TCP) all
end
+++EOF+++

# disable authentication on
# TODO : find a better solution to deal with authentication
runmqsc §[queue-manager.name.uc]§ <<+++EOF+++
ALTER QMGR CHLAUTH(DISABLED)
DISPLAY QMGR CHLAUTH
end
+++EOF+++




###########################
# channel setup

# create a default channel for unsecured communication
runmqsc §[queue-manager.name.uc]§ <<+++EOF+++
define channel(§[channel.name.uc]§) CHLTYPE(SVRCONN) TRPTYPE(TCP)
display channel(§[channel.name.uc]§) all
end
+++EOF+++




###########################
# queue setup

runmqsc §[queue-manager.name.uc]§ <<+++EOF+++
define qlocal(§[queue.name.uc]§)
end
+++EOF+++




##########################
# connect to a queue for jboss eap 6

TODO




##########################
# enable SSL/TLS with a standard cipher (DES_SHA_EXPORT on WMQ => SSL_RSA_WITH_DES_CBC_SHA on jboss)
# /!\ require SSLv3 to be enable on the jvm side (in JAVA_HOME/lib/security/java.security, the directive 'jdk.tls.disabledAlgorithms' must not contains 'SSLv3')
#  for supported cipher, see
#  http://129.33.205.81/support/knowledgecenter/SSFKSJ_7.5.0/com.ibm.mq.dev.doc/q032470_.htm?lang=en
#  this page list the CipherSpecs supported by WebSphere MQ and their equivalent CipherSuites

# upload IBM GSKIT and IBM JRE rpm on WMQ server
sftp
 put /Cloud/binaries/webspheremq/tmp/MQSeriesGSKit-* /tmp
 put /Cloud/binaries/webspheremq/tmp/MQSeriesJRE-* /tmp 

#    on WMQ server side
#    as root
# stop all QM
service wmq stop
# install GSKit
cd /tmp
yum localinstall -y MQSeriesJRE-7.5.0-2.x86_64.rpm MQSeriesGSKit-7.5.0-2.x86_64.rpm MQSeriesJRE-U200491-7.5.0-4.x86_64.rpm MQSeriesGSKit-U200491-7.5.0-4.x86_64.rpm
# start all QM
service wmq start

#    as mqm
# create the key repository
runmqakm -keydb -create -db /var/mqm/qmgrs/MYQM/ssl/key.kdb -pw 12345678az@A#Z -type cms -stash -fips -strong
chmod 640 /var/mqm/qmgrs/MYQM/ssl/key.*

# create a self-signed certificate
# the label MUST BE ibmwebspheremq<queue manager name in lowercase>. Otherwise, WMQ server will not present its certificate
runmqakm -cert -create -db /var/mqm/qmgrs/MYQM/ssl/key.kdb -pw 12345678az@A#Z -label ibmwebspheremqmyqm -dn "CN=$(hostname -f),OU=WMQ,O=WAT,ST=France,C=FR" -size 4096 -expire 1000 -fips -sig_alg SHA1WithRSA

# extract the certificate
runmqakm -cert -extract -db /var/mqm/qmgrs/MYQM/ssl/key.kdb -pw 12345678az@A#Z -label ibmwebspheremqmyqm -target /tmp/myqm.fips.cert -format ascii -fips

------------------------
# can also convert an existing PKCS12 pk/cert into a WMQ key repo
runmqakm -keydb -convert -db /tmp/mqm.pkcs12 -pw 12345678az@A#Z -type pkcs12 -new_db /var/mqm/qmgrs/MYQM/ssl/key.kdb -new_pw 12345678az@A#Z -strong -stash -fips
------------------------

# enable SSL/TLS on the channel 'CUSTOM.CHN2.SRVCONN'
runmqsc MYQM
 alter channel(CUSTOM.CHN2.SRVCONN) CHLTYPE(SVRCONN) TRPTYPE(TCP) SSLCIPH(DES_SHA_EXPORT) SSLCAUTH(OPTIONAL) DESCR('Receiver channel using SSL from C1 to MYQM')

#    on JBoss server side
#    as root
# get the WMQserver certificate 'myqm.fips.cert' (previously generated on the WMQ server) and put it in a truststore
keytool -import -keystore /home/jeeusra/eap.inst1/configuration/myqm.jks -storepass 12345678 -file /tmp/myqm.fips.cert -alias myqm -noprompt
chown jeeusra: /home/jeeusra/eap.inst1/configuration/myqm.jks

# declare the trustore as java system-properties in the jboss instance
~jeeusra/eap.inst1/bin/jboss-cli.sh
 # the truststore
 /system-property=javax.net.ssl.trustStore:add(value=/home/jeeusra/eap.inst1/configuration/myqm.jks)
 # the truststore's password
 /system-property=javax.net.ssl.trustStorePassword:add(value=12345678)
 # declare add a 'sslCipherSuite' in the connection definition which is using the channel 'CUSTOM.CHN2.SRVCONN'
 /subsystem=resource-adapters/resource-adapter=wmq-7.5.0.4/connection-definitions=mycf2/config-properties=sslCipherSuite:add(value=SSL_RSA_WITH_DES_CBC_SHA)
 # optionally enable ssl debug
 /system-property=javax.net.debug:add(value=all)

# restart the jboss instance
~jeeusra/eap.inst1/bin/jboss-eapd.sh restart




##########################
# enable IBM Cipher to work with OpenJDK (TLS_RSA_WITH_AES_128_CBC_SHA256 on WMQ => SSL_RSA_WITH_AES_128_CBC_SHA256 on jboss) 

#    on WMQ server side
#    as mqm
runmqsc MYQM
 # assign a IBM Cipher to the channel 'CUSTOM.CHN2.SRVCONN'
 alter channel(CUSTOM.CHN2.SRVCONN) CHLTYPE(SVRCONN) TRPTYPE(TCP) SSLCIPH(TLS_RSA_WITH_AES_128_CBC_SHA256) SSLCAUTH(OPTIONAL) DESCR('Receiver channel using SSL from C1 to MYQM')

#    on JBoss server side
#    as root
# copy these jar (taken in IBM JRE) in OpenJDK (/usr/lib/jvm/java-1.7.0-openjdk.x86_64/jre/lib/ext/)
ibmcertpathprovider.jar
ibmjcefips.jar
ibmjcefw.jar
ibmjceprovider.jar
ibmjsseprovider2.jar
ibmpkcs.jar
IBMSecureRandom.jar

------------
mkdir -p /opt/jvm-ibm
cd /opt/jvm-ibm/
tar xvzf /tmp/mq_jre64.tar.gz 
cp /opt/jvm-ibm/jre/lib/ext/{ibmjcefips,ibmjceprovider,IBMSecureRandom}.jar /usr/lib/jvm/java-1.7.0-openjdk.x86_64/jre/lib/ext/
cp /opt/jvm-ibm/jre/lib/ibm{certpathprovider,jcefw,jsseprovider2,pkcs}.jar /usr/lib/jvm/java-1.7.0-openjdk.x86_64/jre/lib/ext/
------------

# declare IBM security provider in /usr/lib/jvm/java-1.7.0-openjdk.x86_64/jre/lib/security/java.security at the end of the security provider list
security.provider.10=com.ibm.jsse2.IBMJSSEProvider2
security.provider.11=com.ibm.crypto.provider.IBMJCE

# assign a IBM Cipher in the connection definition which is using the channel 'CUSTOM.CHN2.SRVCONN'
~jeeusra/eap.inst1/bin/jboss-cli.sh
 /subsystem=resource-adapters/resource-adapter=wmq-7.5.0.4/connection-definitions=mycf2/config-properties=sslCipherSuite:add(value=SSL_RSA_WITH_AES_128_CBC_SHA256)

# restart jboss
~jeeusra/eap.inst1/bin/jboss-eapd.sh restart




##########################
# enable FIPS on WMQ server
#    on WMQ server side
#    as mqm
runmqsc MYQM
 # enable FIPS on the queue manager
 alter QMGR SSLFIPS(YES)

#    as root
# restart the queue manager (so that SSLFIPS changes applies)
service wmq restart

##########################
# enable FIPS between the JBoss server and the WMQ server

# set a FIPS compatible cipher (TLS_RSA_WITH_AES_128_CBC_SHA256 on WMQ => SSL_RSA_WITH_AES_128_CBC_SHA256 on jboss)

##########################
# enable FIPS on JBoss server (with IBM JRE)

#    on JBoss server side
#    as root
# install an IBM JRE on JBoss server
# configure the JBoss server to start with this IBM JRE

# enable FIPS for WMQ classes for Java/JMS (because of a bug in WMQ rar/Jboss EAP integration, we can't use 'sslFipsRequired' configuration property of the connection factory/mdb)
~jeeusra/eap.inst1/bin/jboss-cli.sh
 /system-property=com.ibm.jsse2.usefipsprovider:add(value=true)

# restart the jboss instance
~jeeusra/eap.inst1/bin/jboss-eapd.sh restart

##########################
# enable FIPS on JBoss server (with OpenJDK JRE)

#    on JBoss server side
#    as root
# add IBM FIPS security provider in /usr/lib/jvm/java-1.7.0-openjdk.x86_64/jre/lib/security/java.security at the end of the list
security.provider.12=com.ibm.crypto.fips.provider.IBMJCEFIPS

# configure the JBoss server to start with this OpenJDK JRE




##########################
# TODO: enable SSL/TLS 2-way

#    on the jboss side
#    as jeeusra
# create e certificate
keytool -genkey -keystore /home/jeeusra/eap.inst1/configuration/myqm.client.jks -storepass 12345678 -alias myalias -keypass 12345678 -keyalg RSA -keysize 4096
keytool -export -keystore /home/jeeusra/eap.inst1/configuration/myqm.client.jks -storepass 12345678 -alias myalias -file /tmp/myqm.client.cert

# declare it in jboss
~jeeusra/eap.inst1/bin/jboss-cli.sh
 /system-property=javax.net.ssl.keyStore:add(value=/home/jeeusra/eap.inst1/configuration/myqm.client.jks)
 /system-property=javax.net.ssl.keyStorePassword:add(value=12345678)

#     on WMQ server side
#     as mqm
# import the jboss certificate in the key repository
TODO