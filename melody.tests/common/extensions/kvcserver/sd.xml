<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>

<sequence basedir=".">

    <property name="kvc_server_match_criteria"   value="1=1"/>
    <property name="kvc_engine_match_criteria"   value="1=1"/>

    <!-- deploy each kvc-engines.
         caller must define 'kvce.binaries.path'.
         caller can define 'machine_match_criteria' to target a subset of machines.
         caller can define 'kvc_engine_match_criteria' to target a subset of kvc-engines.
         caller can define 'kvc_server_match_criteria' to target a subset of kvc-servers. -->
    <order name="deploy-kvc-engines">
        <echo message="Deploying KVC Engines ..."/>
        <do-operation-on-kvc-engines>
            <param name="callback.kvce" value="deploy-kvc-engine-on-single-machine"/>
        </do-operation-on-kvc-engines>
        <echo message="-- KCV Engines successfully deployed."/>
    </order>

    <!-- deploy each kvc-servers.
         caller must define 'kvce.binaries.path'.
         caller can define callback 'callback.server' in order to perform extra actions on each kvc-servers.
         caller must define callback 'callback.module' in order to perform module related actions on each kvc-servers, if modules are declared on a kvc-server.
         caller must define callback 'callback.application' in order to perform application related actions on each kvc-servers, if applications are declared on a kvc-server.
         caller can define 'machine_match_criteria' to target a subset of machines.
         caller can define 'kvc_server_match_criteria' to target a subset of kvc-servers. -->
    <order name="deploy-kvc-servers">
        <call orders="deploy-kvc-engines"/>
        <echo message="Creating KVC Servers ..."/>
        <do-operation-on-kvc-servers>
            <param name="callback.kvcs" value="deploy-kvc-server"/>
        </do-operation-on-kvc-servers>
        <echo message="-- KVC Servers successfully created."/>
    </order>

    <!-- start each kvc-servers.
         caller can define 'machine_match_criteria' to target a subset of machines.
         caller can define 'kvc_server_match_criteria' to target a subset of kvc-servers. -->
    <order name="start-kvc-servers">
        <echo message="Starting KVC Servers ..."/>
        <do-operation-on-kvc-servers>
            <param name="callback.kvcs" value="start-kvc-server"/>
        </do-operation-on-kvc-servers>
        <echo message="-- KVC Servers successfully started."/>
    </order>

    <!-- stop each kvc-servers.
         caller can define 'machine_match_criteria' to target a subset of machines.
         caller can define 'kvc_server_match_criteria' to target a subset of kvc-servers. -->
    <order name="stop-kvc-servers">
        <echo message="Stopping KVC Servers ..."/>
        <do-operation-on-kvc-servers>
            <param name="callback.kvcs" value="stop-kvc-server"/>
        </do-operation-on-kvc-servers>
        <echo message="-- KVC Servers successfully stopped."/>
    </order>

    <!-- undeploy each kvc-servers.
         caller can define callback 'callback.server' in order to perform extra actions on each kvc-servers.
         caller must define callback 'callback.module' in order to perform module related actions on each kvc-servers, if modules are declared on a kvc-server.
         caller must define callback 'callback.application' in order to perform application related actions on each kvc-servers, if applications are declared on a kvc-server.
         caller can define 'machine_match_criteria' to target a subset of machines.
         caller can define 'kvc_server_match_criteria' to target a subset of kvc-servers. -->
    <order name="undeploy-kvc-servers">
        <echo message="Removing KVC Servers ..."/>
        <do-operation-on-kvc-servers>
            <param name="callback.kvcs" value="undeploy-kvc-server"/>
        </do-operation-on-kvc-servers>
        <echo message="-- KVC Servers successfully removed"/>
    </order>


    <!-- loop on each machines where a kvc-server is declared.
         caller must define callback 'callback.machine'.
         caller can define 'machine_match_criteria' to target a subset of machines. -->
    <order name="do-operation-on-kvc-machines">
        <select-running-machines>
            <param name="machine_eligible_criteria" value="exists(kvc-server)"/>
        </select-running-machines>
    </order>


    <!-- loop on each kvc-engines.
         caller must define callback 'callback.kvce'.
         caller can define 'machine_match_criteria' to target a subset of machines.
         caller can define 'kvc_engine_match_criteria' to target a subset of kvc-engines.
         caller can define 'kvc_server_match_criteria' to target a subset of kvc-servers. -->
    <order name="do-operation-on-kvc-engines">
        <do-operation-on-kvc-machines>
            <param name="callback.machine" value="do-operation-on-kvc-engines-on-single-machine"/>
        </do-operation-on-kvc-machines>
    </order>

    <order name="do-operation-on-kvc-engines-on-single-machine">
        <foreach    items="§[machine]§/jboss-datagrid-engine [ @version=§[machine]§/kvc-server [ §[kvc_server_match_criteria]§ ]/@version and §[kvc_engine_match_criteria]§ ] "
                    item-name="kvce">
            <property name="kvce.provider"         value="§[ §[kvce]§/@provider ]§"/>
            <property name="kvce.path"             value="§[ §[kvce]§/@path ]§"/>
            <property name="kvce.version"          value="§[ §[kvce]§/@version ]§"/>
            <property name="kvce.owner"            value="§[ §[kvce]§/owner/@login ]§"/>
            <property name="kvce.owner.pwd"        value="§[ §[machine]§/credentials/credential[@login='§[kvce.owner]§']/@password ]§"/>
            <property name="kvce.owner.home-dir"   value="§[ §[machine]§/credentials/credential[@login='§[kvce.owner]§']/@homedir ]§"/>
            <property name="kvce.group"            value="§[ §[machine]§/credentials/credential[@login='§[kvce.owner]§']/@group ]§"/>

            <source order="§[callback.kvce]§" provider="§[kvce.provider]§"/>
        </foreach>
    </order>


    <!-- loop on each kvc-servers.
         caller must define callback 'callback.kvcs'.
         caller can define 'machine_match_criteria' to target a subset of machines.
         caller can define 'kvc_server_match_criteria' to target a subset of kvc-servers. -->
    <order name="do-operation-on-kvc-servers">
        <do-operation-on-kvc-machines>
            <param name="callback.machine" value="do-operation-on-kvc-servers-on-single-machine"/>
        </do-operation-on-kvc-machines>
    </order>

    <order name="do-operation-on-kvc-servers-on-single-machine">
        <foreach    items="§[machine]§/kvc-server[ §[kvc_server_match_criteria]§ ]"
                    item-name="kvcs">
            <property name="kvcs.provider"                value="§[ §[kvcs]§/@provider ]§"/>
            <property name="kvcs.path"                    value="§[ §[kvcs]§/@path ]§"/>
            <property name="kvcs.version"                 value="§[ §[kvcs]§/@version ]§"/>
            <property name="kvcs.java"                    value="§[ §[kvcs]§/@java ]§"/>
            <property name="kvcs.owner"                   value="§[ §[kvcs]§/owner/@login ]§"/>
            <property name="kvcs.owner.pwd"               value="§[ §[machine]§/credentials/credential[@login='§[kvcs.owner]§']/@password ]§"/>
            <property name="kvcs.owner.home-dir"          value="§[ §[machine]§/credentials/credential[@login='§[kvcs.owner]§']/@homedir ]§"/>
            <property name="kvcs.profile"                 value="§[ melody:getAttributeValue(§[kvcs]§/@profile, '') ]§"/>
            <property name="kvcs.profile.file"            value="standalone§[if (string-length('§[kvcs.profile]§')=0) then '' else '-§[kvcs.profile]§']§.xml"/>

            <property name="kvce.path"                    value="§[ §[machine]§/jboss-datagrid-engine[@version='§[kvcs.version]§']/@path ]§"/>
            <property name="kvce.owner"                   value="§[ §[machine]§/jboss-datagrid-engine[@version='§[kvcs.version]§']/owner/@login ]§"/>
            <property name="kvce.group"                   value="§[ §[machine]§/credentials/credential[@login='§[kvce.owner]§']/@group ]§"/>

            <property name="kvcs.memory.xms"              value="§[ melody:getAttributeValue(§[kvcs]§/memory/@xms, '128m') ]§"/>
            <property name="kvcs.memory.xmx"              value="§[ melody:getAttributeValue(§[kvcs]§/memory/@xmx, '512m') ]§"/>
            <property name="kvcs.memory.perm-size"        value="§[ melody:getAttributeValue(§[kvcs]§/memory/@perm-size, '64m')]§"/>
            <!--  with -XX:MaxPermSize=32m, got an java.lang.OutOfMemoryError: PermGen space -->

            <property name="kvcs.listen.device"           value="§[ melody:getAttributeValue(§[kvcs]§/listen-on/@device, 'eth0') ]§"/>
            <property name="kvcs.listen.ip"               value="§[ melody:getNetworkDeviceElementByName(§[machine]§, '§[kvcs.listen.device]§')/@ip ]§"/>
            <property name="kvcs.listen.fqdn"             value="§[ melody:getNetworkDeviceElementByName(§[machine]§, '§[kvcs.listen.device]§')/@fqdn ]§"/>
            <property name="kvcs.listen.port-offset"      value="§[ melody:getAttributeValue(§[kvcs]§/listen-on/@port-offset, '0') ]§"/>
            <property name="kvcs.listen.port.http"        value="§[ number(melody:getAttributeValue(§[kvcs]§/listen-on/socket[@name='http']/@port, '8080')) + §[kvcs.listen.port-offset]§ ]§"/>
            <property name="kvcs.listen.port.https"       value="§[ number(melody:getAttributeValue(§[kvcs]§/listen-on/socket[@name='https']/@port, '8443')) + §[kvcs.listen.port-offset]§ ]§"/>
            <property name="kvcs.listen.port.hotrod"      value="§[ number(melody:getAttributeValue(§[kvcs]§/listen-on/socket[@name='hotrod']/@port, '11222')) + §[kvcs.listen.port-offset]§ ]§"/>
            <property name="kvcs.listen.mgnt.device"      value="§[ melody:getAttributeValue(§[kvcs]§/listen-on/@management-device, '§[kvcs.listen.device]§') ]§"/>
            <property name="kvcs.listen.mgnt.ip"          value="§[ melody:getNetworkDeviceElementByName(§[machine]§, '§[kvcs.listen.mgnt.device]§')/@ip ]§"/>
            <property name="kvcs.listen.mgnt.fqdn"        value="§[ melody:getNetworkDeviceElementByName(§[machine]§, '§[kvcs.listen.mgnt.device]§')/@fqdn ]§"/>
            <property name="kvcs.mgnt.keystore.url"       value="§[ §[kvcs]§/keystore[exists(key[@usage='management'])]/@path ]§"/>
            <property name="kvcs.mgnt.keystore.pwd"       value="§[ §[kvcs]§/keystore[exists(key[@usage='management'])]/@password ]§"/>
            <property name="kvcs.mgnt.key.alias"          value="§[ §[kvcs]§/keystore/key[@usage='management']/@alias ]§"/>
            <property name="kvcs.mgnt.key.pwd"            value="§[ §[kvcs]§/keystore/key[@usage='management']/@password ]§"/>
            <property name="kvcs.mgnt.key.dn"             value="§[ melody:getAttributeValue(§[kvcs]§/keystore/key[@usage='management']/@dname, 'CN=§[kvcs.listen.mgnt.fqdn]§,OU=admin,O=ma gueule,L=Paris,ST=France,C=FR') ]§"/>

            <property name="kvcs.vault.enc-dir"           value="§[ melody:getAttributeValue(§[kvcs]§/vault/enc-dir/@path, '§[kvcs.path]§/configuration/vault/secret/') ]§"/>
            <property name="kvcs.vault.url"               value="§[ melody:getAttributeValue(§[kvcs]§/vault/keystore/@path, '§[kvcs.path]§/configuration/vault/vault.keystore') ]§"/>
            <property name="kvcs.vault.pwd"               value="§[ melody:getAttributeValue(§[kvcs]§/vault/keystore/@password, 'changeit') ]§"/>
            <property name="kvcs.vault.iteration-count"   value="§[ melody:getAttributeValue(§[kvcs]§/vault/secret/@iteration-count, '69') ]§"/>
            <property name="kvcs.vault.salt"              value="§[ melody:getAttributeValue(§[kvcs]§/vault/secret/@salt, 'supasalt') ]§"/>
            <property name="kvcs.vault.salt"              value="§[ if (string-length('§[kvcs.vault.salt]§')!=8) then melody:raiseError('Vault salt must be an eight char String!') else '§[kvcs.vault.salt]§' ]§"/>
            <property name="kvcs.vault.masked-pwd"        value="§[ jboss:maskPassword('§[kvcs.vault.salt]§', '§[kvcs.vault.iteration-count]§', '§[kvcs.vault.pwd]§') ]§"/>
            <property name="kvcs.vault.key.alias"         value="§[ melody:getAttributeValue(§[kvcs]§/vault/keystore/@alias, 'vault') ]§"/>
            <property name="kvcs.vault.key.dn"            value="CN=§[kvcs.listen.mgnt.fqdn]§,OU=vault,O=ma gueule,L=Paris,ST=France,C=FR"/>

            <property name="kvcs.id"                      value="§[kvcs.owner]§@§[kvcs.listen.ip]§:+§[kvcs.listen.port-offset]§"/>

            <property name="kvcs.disabled"                value="§[ melody:getAttributeValue(§[kvcs]§/features/@administration-only, 'false') ]§"/>
            <property name="kvcs.native"                  value="§[ melody:getAttributeValue(§[kvcs]§/jboss-web/@uses-native-components, 'false') ]§"/>

            <source order="§[callback.kvcs]§"/>
        </foreach>
    </order>


    <order name="deploy-kvc-server">
        <source order="deploy-kvc-server-on-single-machine" provider="§[kvcs.provider]§"/>
    </order>

    <order name="start-kvc-server">
        <source order="start-kvc-server-on-single-machine" provider="§[kvcs.provider]§"/>
    </order>

    <order name="stop-kvc-server">
        <source order="stop-kvc-server-on-single-machine" provider="§[kvcs.provider]§"/>
    </order>
    <order name="undeploy-kvc-server">
        <source order="undeploy-kvc-server-on-single-machine" provider="§[kvcs.provider]§"/>
    </order>

</sequence>