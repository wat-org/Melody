#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.3/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    log         127.0.0.1 local2 
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    nbproc      1
    user        §[ws.owner]§
    group       §[ws.group]§
    daemon

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will 
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    log         global
    retries     3
    timeout     connect 10000		# default 10 second time out if a backend is not found
    timeout     client  300000
    timeout     server  300000
    balance     roundrobin		# Load Balancing algorithm
    option      redispatch
    option      dontlognull

§[
	string-join(
		for $socket in §[machine]§/web-server/listen-on/socket
		return 
		if ($socket/@mode = 'http') 
		then	concat(	codepoints-to-string(10),
				'frontend fe-',	$socket/@name, codepoints-to-string(10),
				'    bind        §[ws.listen.ip]§:', $socket/@port + §[ws.listen.port-offset]§, codepoints-to-string(10),
				'    mode        http', codepoints-to-string(10),
				'    option      httplog', codepoints-to-string(10),
				'    option      forwardfor		# This sets X-Forwarded-For', codepoints-to-string(10),
				'    option      httpclose		# Disable Keepalive - required for sticky session', codepoints-to-string(10),
				string-join(
					for $application in §[machine]§/web-server/applications/application
					return concat(	'    # backend switch for application "', replace($application/@name, '[.-]', '_'), '"', codepoints-to-string(10),
							'    acl         ', 'acl-', replace($application/@name, '[.-]', '_'), ' path_beg ', '/', $application/@name, codepoints-to-string(10),
							'    use_backend ', 'be-', replace($application/@name, '[.-]', '_'), '-from-fe-', $socket/@name, ' if ', 'acl-', replace($application/@name, '[.-]', '_') ),
					codepoints-to-string(10) ),
				codepoints-to-string(10),
				codepoints-to-string(10),
				string-join(
					for $application in §[machine]§/web-server/applications/application
					return concat(	'# backend for application "', replace($application/@name, '[.-]', '_'), '"', ' from frontend "fe-', $socket/@name, '"', codepoints-to-string(10),
							'backend ', 'be-', replace($application/@name, '[.-]', '_'), '-from-fe-', $socket/@name, codepoints-to-string(10),
							'    mode        http', codepoints-to-string(10),
							'    option      httplog', codepoints-to-string(10),
							'    cookie      JSESSIONID prefix	# This cookie will be used for sticky session', codepoints-to-string(10),
							'    option      httpchk', codepoints-to-string(10),
							'    option      httpclose		# Disable Keepalive - required for sticky session', codepoints-to-string(10),
							string-join(
								for $machine in ./environment//instance[ exists(§[backend_node]§/applications/application[@name=$application/@name]) ]
								return	string-join(
										for $backend in $machine/§[backend_node]§ [ applications/application[@name=$application/@name] ]
										return concat(	'    ', 
												'server', 
												' ', 
												replace(melody:getNetworkDeviceElementByName($machine, melody:getAttributeValue($backend/listen-on/@device, 'eth0'))/@ip, '[.]', '_'),
												'_',
												number($backend/listen-on/socket[@name=$socket/@name]/@port) + number(melody:getAttributeValue($backend/listen-on/@port-offset, '0')),
												' ',
												melody:getNetworkDeviceElementByName($machine, melody:getAttributeValue($backend/listen-on/@device, 'eth0'))/@ip,
												':',
												number($backend/listen-on/socket[@name=$socket/@name]/@port) + number(melody:getAttributeValue($backend/listen-on/@port-offset, '0')),
												' cookie ',
												replace(melody:getNetworkDeviceElementByName($machine, melody:getAttributeValue($backend/listen-on/@device, 'eth0'))/@ip, '[.]', '_'),
												'_',
												number($backend/listen-on/socket[@name=$socket/@name]/@port) + number(melody:getAttributeValue($backend/listen-on/@port-offset, '0')),
												' weight 1 maxconn 512 check' ), 
									codepoints-to-string(10) ),
								codepoints-to-string(10) ),
							codepoints-to-string(10) ),
					codepoints-to-string(10) ) )
		else	concat(	codepoints-to-string(10),
				'frontend fe-',	$socket/@name, codepoints-to-string(10),
				'    bind        §[ws.listen.ip]§:', $socket/@port + §[ws.listen.port-offset]§, codepoints-to-string(10),
				'    mode        tcp', codepoints-to-string(10),
				'    option      tcplog', codepoints-to-string(10),
				'    use_backend be-all_apps-from-fe-', $socket/@name, codepoints-to-string(10),
				codepoints-to-string(10),
				'# backend for all applications from frontend "fe-', $socket/@name, '"', codepoints-to-string(10),
				'backend ', 'be-all_apps-from-fe-', $socket/@name, codepoints-to-string(10),
				'    mode        tcp', codepoints-to-string(10),
				'    option      tcplog', codepoints-to-string(10),
				string-join(
					for $machine in ./environment//instance[ exists(§[backend_node]§/applications/application[@name=§[machine]§/web-server/applications/application/@name]) ]
					return	string-join(
							for $backend in $machine/§[backend_node]§ [ applications/application[@name=§[machine]§/web-server/applications/application/@name] ]
							return concat(	'    ', 
									'server', 
									' ', 
									replace(melody:getNetworkDeviceElementByName($machine, melody:getAttributeValue($backend/listen-on/@device, 'eth0'))/@ip, '[.]', '_'),
									'_',
									number($backend/listen-on/socket[@name=$socket/@name]/@port) + number(melody:getAttributeValue($backend/listen-on/@port-offset, '0')),
									' ',
									melody:getNetworkDeviceElementByName($machine, melody:getAttributeValue($backend/listen-on/@device, 'eth0'))/@ip,
									':',
									number($backend/listen-on/socket[@name=$socket/@name]/@port) + number(melody:getAttributeValue($backend/listen-on/@port-offset, '0')),
									' weight 1 maxconn 512 check' ), 
							codepoints-to-string(10) ),
					codepoints-to-string(10) ),
				codepoints-to-string(10) ),
		codepoints-to-string(10) )
]§

