<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>

<sequence basedir=".">

    <order name="deploy-mq-servers">
        <call orders="deploy-wmq-servers"/>
    </order>

    <order name="start-mq-servers">
        <call orders="start-wmq-servers"/>
    </order>

    <order name="stop-mq-servers">
        <call orders="stop-wmq-servers"/>
    </order>

    <order name="do-operation-on-mq-servers">
        <call orders="do-operation-on-wmq-servers"/>
    </order>

    <order name="create-queue-manager-on-mq-server">
        <call orders="create-queue-manager-on-wmq-server"/>
    </order>

    <order name="create-channel-on-mq-server">
        <call orders="create-channel-on-wmq-server"/>
    </order>

    <order name="create-queue-on-mq-server">
        <call orders="create-queue-on-wmq-server"/>
    </order>

    <!-- deploy each mq-servers.
         caller can define callback 'callback.server' in order to perform extra actions on each mq-servers.
         caller can define callback 'callback.application' in order to perform application related actions on each mq-servers, if applications are declared on a mq-server.
         caller can define 'machine_match_criteria' to target a subset of machines. -->
    <order name="deploy-wmq-servers">
        <echo message="Creating WebSphere MQ Servers ..."/>
        <call orders="do-operation-on-wmq-servers">
            <param name="callback.mqs" value="§[melody:getSequenceDescriptorPath()]§::deploy-wmq-server-on-single-machine"/>
        </call>
        <echo message="-- WebSphere MQ Servers successfully created."/>
    </order>

    <!-- start each mq-servers.
         caller can define 'machine_match_criteria' to target a subset of machines. -->
    <order name="start-wmq-servers">
        <echo message="Starting WebSphere MQ Servers ..."/>
        <call orders="do-operation-on-wmq-servers">
            <param name="callback.mqs" value="§[melody:getSequenceDescriptorPath()]§::start-wmq-server-on-single-machine"/>
        </call>
        <echo message="-- WebSphere MQ Servers successfully started."/>
    </order>

    <!-- stop each mq-servers.
         caller can define 'machine_match_criteria' to target a subset of machines. -->
    <order name="stop-wmq-servers">
        <echo message="Stopping WebSphere MQ Servers ..."/>
        <call orders="do-operation-on-wmq-servers">
            <param name="callback.mqs" value="§[melody:getSequenceDescriptorPath()]§::stop-wmq-server-on-single-machine"/>
        </call>
        <echo message="-- WebSphere MQ Servers successfully stopped."/>
    </order>

    <!-- loop on each machines where a mq-server is declared.
         caller must define callback 'callback.mqs'.
         caller can define 'machine_match_criteria' to target a subset of machines. -->
    <order name="do-operation-on-wmq-servers">
        <call orders="select-running-machines" sequence-descriptor="../machines/sd.xml">
            <param name="machine_eligible_criteria"   value="exists(mq-server)"/>
            <param name="callback.machine"            value="§[melody:getSequenceDescriptorPath()]§::do-operation-on-wmq-server-on-single-machine"/>
        </call>
    </order>

    <order name="do-operation-on-wmq-server-on-single-machine">
        <property name="mqs.path"                 value="§[ §[machine]§/mq-server/@path ]§"/>
        <property name="mqs.provider"             value="§[ melody:getAttributeValue(§[machine]§/mq-server/@provider, 'wmq') ]§"/>
        <property name="mqs.version"              value="§[ §[machine]§/mq-server/@version ]§"/>
        <property name="mqs.owner"                value="§[ §[machine]§/mq-server/owner/@login ]§"/>
        <property name="mqs.owner.id"             value="§[ §[machine]§/credentials/user[@name='§[mqs.owner]§']/@id ]§"/>
        <property name="mqs.owner.pwd"            value="§[ §[machine]§/credentials/user[@name='§[mqs.owner]§']/@password ]§"/>
        <property name="mqs.owner.home-dir"       value="§[ §[machine]§/credentials/user[@name='§[mqs.owner]§']/@homedir ]§"/>
        <property name="mqs.group"                value="§[ §[machine]§/credentials/user[@name='§[mqs.owner]§']/@ref-group-name ]§"/>
        <property name="mqs.group.id"             value="§[ §[machine]§/credentials/group[@name='§[mqs.group]§']/@id ]§"/>
        <property name="mqs.listen.device"        value="§[ melody:getAttributeValue(§[machine]§/mq-server/listen-on/@device, 'eth0') ]§"/>
        <property name="mqs.listen.port-offset"   value="§[ melody:getAttributeValue(§[machine]§/mq-server/listen-on/@port-offset, '0') ]§"/>
        <property name="mqs.listen.port.tcp"      value="§[ number(melody:getAttributeValue(§[machine]§/mq-server/listen-on/socket[@name='tcp']/@port, '1414')) + §[mqs.listen.port-offset]§ ]§"/>
        <property name="mqs.listen.ip"            value="§[ melody:getNetworkDeviceElementByName(§[machine]§, '§[mqs.listen.device]§')/@ip ]§"/>
        <property name="mqs.listen.fqdn"          value="§[ melody:getNetworkDeviceElementByName(§[machine]§, '§[mqs.listen.device]§')/@fqdn ]§"/>
        <property name="realm"                     value="§[ §[machine]§/kerberos-host/@realm ]§"/>

        <call orders="§[substring-after('§[callback.mqs]§','::')]§" sequence-descriptor="§[substring-before('§[callback.mqs]§','::')]§"/>
    </order>

    <property name="callback.server"        value="§[ melody:getSequenceDescriptorPath() ]§::customize-wmq-server.default-callback"/>
    <property name="callback.application"   value="§[ melody:getSequenceDescriptorPath() ]§::customize-wmq-application.default-callback"/>

    <order name="deploy-wmq-server-on-single-machine">
        <!-- start -->
        <call orders="start-service-on-single-machine" sequence-descriptor="../services/sd.xml">
            <param name="service.name" value="wmq"/>
        </call>

        <!-- create queue managers -->
        <foreach    items="§[machine]§/mq-server/queue-managers/queue-manager"
                    item-name="queue-manager"
                    max-par="1">
            <property name="queue-manager.name" value="§[§[queue-manager]§/@name]§"/>

            <call orders="create-queue-manager-on-wmq-server"/>
            <echo message="+ Queue Manager '§[queue-manager.name]§' successfully created on WebSphere MQ Server on machine '§[machine.id]§'."/>

            <!-- create channels -->
            <foreach    items="§[queue-manager]§/channels/channel"
                        item-name="channel">
                <property name="channel.name" value="§[§[channel]§/@name]§"/>
                <property name="channel.secured" value="§[§[channel]§/@secured]§"/>

                <call orders="create-channel-on-wmq-server"/>
                <echo message="+ Channel '§[channel.name]§' successfully created in Queue Manager '§[queue-manager.name]§' on WebSphere MQ Server on machine '§[machine.id]§'."/>
            </foreach>

            <!-- create queues -->
            <foreach    items="§[queue-manager]§/queues/queue"
                        item-name="queue">
                <property name="queue.name" value="§[§[queue]§/@name]§"/>

                <call orders="create-queue-on-wmq-server"/>
                <echo message="+ Queue '§[queue.name]§' successfully created in Queue Manager '§[queue-manager.name]§' on WebSphere MQ Server on machine '§[machine.id]§'."/>
            </foreach>
        </foreach>

        <!-- customize / machine scope -->
        <call orders="§[substring-after('§[callback.server]§','::')]§" sequence-descriptor="§[substring-before('§[callback.server]§','::')]§"/>

        <!-- customize / application scope -->
        <foreach    items="§[machine]§/mq-server/applications/application"
                    item-name="application"
                    max-par="1">
            <property name="appli.name"                 value="§[§[application]§/@name]§"/>

            <!-- customize application -->
            <property name="cb.order"   value="§[substring-after('§[callback.application]§','::')]§"/>
            <property name="cb.sd"      value="§[substring-before('§[callback.application]§','::')]§"/>
            <property name="cb.order"   value="§[
             if ('§[cb.order]§' = 'customize-wmq-application.default-callback') then
               '§[cb.order]§'
             else
               '§[cb.order]§.§[appli.name]§'
            ]§"/>

            <call orders="§[cb.order]§" sequence-descriptor="§[cb.sd]§"/>
            <echo message="+ Application '§[appli.name]§' successfully deployed on WebSphere MQ Server on machine '§[machine.id]§'."/>
        </foreach>

        <!-- (re)start server to apply configuration changes -->
        <call orders="start-wmq-server-on-single-machine"/>

        <echo message="++ WebSphere MQ Server successfully installed and configured on machine '§[machine.id]§'."/>
    </order>

    <order name="customize-wmq-server.default-callback">
        <!-- nothing to do -->
    </order>

    <order name="customize-wmq-application.default-callback">
        <!-- nothing to do -->
    </order>


    <order name="start-wmq-server-on-single-machine">
        <call orders="start-service-on-single-machine" sequence-descriptor="../services/sd.xml">
            <param name="service.name" value="wmq"/>
        </call>

        <echo message="+ WebSphere MQ Server successfully started on '§[machine.id]§'."/>
    </order>


    <order name="stop-wmq-server-on-single-machine">
        <call orders="stop-service-on-single-machine" sequence-descriptor="../services/sd.xml">
            <param name="service.name" value="wmq"/>
        </call>

        <echo message="+ WebSphere MQ Server successfully stopped on '§[machine.id]§'."/>
    </order>

    <!-- create a queue manager on the given mq-server.
         caller must define 'machine.cnx.ip', which represents the administration ip of the mq-server.
         caller must define 'machine.cnx.kp', which represents the key-pair to connect on the mq-server.
         caller must define 'mqs.owner', which represents the mq-server owner.
         caller must define 'queue-manager.name', which represents the queue manager name. -->
    <order name="create-queue-manager-on-wmq-server">
        <property name="queue-manager.name.uc" value="§[upper-case('§[queue-manager.name]§')]§"/>
        <property name="queue-manager.name.lc" value="§[lower-case('§[queue-manager.name]§')]§"/>

        <!-- create and start queue manager
             configure the default listener
             enable FIPS
             disable authentication -->
        <ssh description="[wmq-create-qm:§[queue-manager.name]§:§[machine.cnx.ip]§]" host="§[machine.cnx.ip]§" login="§[mqs.owner]§" keypair-name="§[machine.cnx.kp]§">
            <exec>
                <![CDATA[
dspmq -m §[queue-manager.name.uc]§ 1>/dev/null 2>/dev/null && {
  echo "queue manager '§[queue-manager.name]§' already exists. Nothing to do."
  exit 0
}
# create the queue mamanger
crtmqm §[queue-manager.name.uc]§
# start the queue mamanger
strmqm §[queue-manager.name.uc]§

# set the default listener @ip/port and tell him to start/stop when the queue manager start and stop
runmqsc §[queue-manager.name.uc]§ <<+++EOF+++
alter listener(SYSTEM.DEFAULT.LISTENER.TCP) trptype(TCP) ipaddr(§[mqs.listen.ip]§) port(§[mqs.listen.port.tcp]§) control(QMGR)
display listener(SYSTEM.DEFAULT.LISTENER.TCP) all
end
+++EOF+++

# enable FIPS
runmqsc §[queue-manager.name.uc]§ <<+++EOF+++
ALTER QMGR SSLFIPS(YES)
DISPLAY QMGR SSLFIPS
end
+++EOF+++

# disable authentication
# TODO : find a better solution to deal with autentication
runmqsc §[queue-manager.name.uc]§ <<+++EOF+++
ALTER QMGR CHLAUTH(DISABLED)
DISPLAY QMGR CHLAUTH
end
+++EOF+++

exit 0
                ]]>
            </exec>
        </ssh>

        <!-- the private-key/certificate creation must be done AFTER the queue-manager creation.
        (If the directory /var/mqm/qmgrs/§[queue-manager.name.uc]§/ exists before the queue manager creation,
        the queue manager will be created in '/var/mqm/qmgrs/§[queue-manager.name.uc]§.000'.
        And we don't want that.)-->
        <!-- create a private-key/certificate for the queue manager -->
        <call orders="create-certificate"                    sequence-descriptor="../ca.openssl/sd.xml">
            <param name="cn"         value="§[queue-manager.name.lc]§@§[mqs.listen.fqdn]§"/>
            <param name="ou"         value="WMQ"/>
            <param name="password"   value="12345678"/>
            <param name="alias"      value="ibmwebspheremq§[queue-manager.name.lc]§"/>
        </call>
        <!-- deploy the previously created private-key/certificate in the queue manager ssl directory -->
        <call orders="deploy-certificate"                    sequence-descriptor="../ca.openssl/sd.xml">
            <param name="cn"             value="§[queue-manager.name.lc]§@§[mqs.listen.fqdn]§"/>
            <param name="cnx.user"       value="§[mqs.owner]§"/>
            <param name="dest.basedir"   value="/var/mqm/qmgrs/§[queue-manager.name.uc]§/ssl"/>
        </call>
        <!-- convert it into CMS (required by WMQ) -->
        <ssh description="[wmq-create-qm:§[queue-manager.name]§:§[machine.cnx.ip]§]" host="§[machine.cnx.ip]§" login="§[mqs.owner]§" keypair-name="§[machine.cnx.kp]§">
            <exec>
                <![CDATA[
[ -f "/var/mqm/qmgrs/§[queue-manager.name.uc]§/ssl/key.kdb" ] && exit 0
runmqakm -keydb -convert -db /var/mqm/qmgrs/§[queue-manager.name.uc]§/ssl/§[queue-manager.name.lc]§@§[mqs.listen.fqdn]§.p12 -pw 12345678 -type pkcs12 -new_db /var/mqm/qmgrs/§[queue-manager.name.uc]§/ssl/key.kdb -new_pw 12345678az@A#Z -strong -stash -fips
chmod 640 /var/mqm/qmgrs/§[queue-manager.name.uc]§/ssl/key.*

exit 0
                ]]>
            </exec>
        </ssh>
    </order>

    <!-- create a channel on the given mq-server.
         caller must define 'machine.cnx.ip', which represents the administration ip of the mq-server.
         caller must define 'machine.cnx.kp', which represents the key-pair to connect on the mq-server.
         caller must define 'mqs.owner', which represents the mq-server owner.
         caller must define 'queue-manager.name', which represents the queue manager name.
         caller must define 'channel.name', which represents the channel name.
         caller must define 'channel.secured', which indicate if the channel should be secured or not. -->
    <order name="create-channel-on-wmq-server">
        <property name="queue-manager.name.uc"   value="§[upper-case('§[queue-manager.name]§')]§"/>
        <property name="channel.name.uc"         value="§[upper-case('§[channel.name]§')]§"/>

        <!-- create channel -->
        <ssh description="[wmq-create-chan:§[queue-manager.name]§:§[channel.name]§:§[machine.cnx.ip]§]" host="§[machine.cnx.ip]§" login="§[mqs.owner]§" keypair-name="§[machine.cnx.kp]§">
            <exec>
                <![CDATA[
SSL_OPTS=""
[ "§[channel.secured]§" = "true" ] && SSL_OPTS="SSLCIPH(TLS_RSA_WITH_AES_128_CBC_SHA256) SSLCAUTH(OPTIONAL)"
runmqsc §[queue-manager.name.uc]§ <<+++EOF+++
define channel(§[channel.name.uc]§) CHLTYPE(SVRCONN) TRPTYPE(TCP) ${SSL_OPTS}
display channel(§[channel.name.uc]§) all
end
+++EOF+++

exit 0
                ]]>
            </exec>
        </ssh>
    </order>

    <!-- create a queue on the given mq-server.
         caller must define 'machine.cnx.ip', which represents the administration ip of the mq-server.
         caller must define 'machine.cnx.kp', which represents the key-pair to connect on the mq-server.
         caller must define 'mqs.owner', which represents the mq-server owner.
         caller must define 'queue-manager.name', which represents the queue manager name.
         caller must define 'queue.name', which represents the queue name. -->
    <order name="create-queue-on-wmq-server">
        <property name="queue-manager.name.uc"   value="§[upper-case('§[queue-manager.name]§')]§"/>
        <property name="queue.name.uc"           value="§[upper-case('§[queue.name]§')]§"/>

        <!-- create and start queue manager
             configure the default listener
             disable authentication
             create unsecured and secured channel -->
        <ssh description="[wmq-create-queue:§[queue-manager.name]§:§[queue.name]§:§[machine.cnx.ip]§]" host="§[machine.cnx.ip]§" login="§[mqs.owner]§" keypair-name="§[machine.cnx.kp]§">
            <exec>
                <![CDATA[
dspmq -m §[queue-manager.name.uc]§ 1>/dev/null 2>/dev/null || {
  echo "queue manager '§[queue-manager.name]§' doesn't exists. Can't create queue '§[queue.name]§' on! Exiting ..."
  exit 1
}

runmqsc §[queue-manager.name.uc]§ <<+++EOF+++
define qlocal(§[queue.name.uc]§)
end
+++EOF+++

exit 0
                ]]>
            </exec>
        </ssh>
    </order>

</sequence>